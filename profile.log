SCRIPT  /usr/local/share/nvim/runtime/ftplugin/go.vim
Sourced 2 times
Total time:   0.000318
 Self time:   0.000318

count  total (s)   self (s)
                            " Vim filetype plugin file
                            " Language:	Go
                            " Maintainer:	David Barnett (https://github.com/google/vim-ft-go)
                            " Last Change:	2014 Aug 16
                            
    2              0.000009 if exists('b:did_ftplugin')
                              finish
    2              0.000001 endif
    2              0.000035 let b:did_ftplugin = 1
                            
    2              0.000029 setlocal formatoptions-=t
                            
    2              0.000008 setlocal comments=s1:/*,mb:*,ex:*/,://
    2              0.000007 setlocal commentstring=//\ %s
                            
    2              0.000005 let b:undo_ftplugin = 'setl fo< com< cms<'
                            
                            " vim: sw=2 sts=2 et

SCRIPT  /usr/local/share/nvim/runtime/indent/go.vim
Sourced 2 times
Total time:   0.000168
 Self time:   0.000168

count  total (s)   self (s)
                            " Vim indent file
                            " Language:	Go
                            " Maintainer:	David Barnett (https://github.com/google/vim-ft-go)
                            " Last Change:	2017 Jun 13
                            "
                            " TODO:
                            " - function invocations split across lines
                            " - general line splits (line ends in an operator)
                            
    2              0.000008 if exists('b:did_indent')
                              finish
    2              0.000001 endif
    2              0.000004 let b:did_indent = 1
                            
                            " C indentation is too far off useful, mainly due to Go's := operator.
                            " Let's just define our own.
    2              0.000030 setlocal nolisp
    2              0.000005 setlocal autoindent
    2              0.000006 setlocal indentexpr=GoIndent(v:lnum)
    2              0.000006 setlocal indentkeys+=<:>,0=},0=)
                            
    2              0.000005 if exists('*GoIndent')
    2              0.000002   finish
                            endif
                            
                            function! GoIndent(lnum)
                              let l:prevlnum = prevnonblank(a:lnum-1)
                              if l:prevlnum == 0
                                " top of file
                                return 0
                              endif
                            
                              " grab the previous and current line, stripping comments.
                              let l:prevl = substitute(getline(l:prevlnum), '//.*$', '', '')
                              let l:thisl = substitute(getline(a:lnum), '//.*$', '', '')
                              let l:previ = indent(l:prevlnum)
                            
                              let l:ind = l:previ
                            
                              if l:prevl =~ '[({]\s*$'
                                " previous line opened a block
                                let l:ind += shiftwidth()
                              endif
                              if l:prevl =~# '^\s*\(case .*\|default\):$'
                                " previous line is part of a switch statement
                                let l:ind += shiftwidth()
                              endif
                              " TODO: handle if the previous line is a label.
                            
                              if l:thisl =~ '^\s*[)}]'
                                " this line closed a block
                                let l:ind -= shiftwidth()
                              endif
                            
                              " Colons are tricky.
                              " We want to outdent if it's part of a switch ("case foo:" or "default:").
                              " We ignore trying to deal with jump labels because (a) they're rare, and
                              " (b) they're hard to disambiguate from a composite literal key.
                              if l:thisl =~# '^\s*\(case .*\|default\):$'
                                let l:ind -= shiftwidth()
                              endif
                            
                              return l:ind
                            endfunction
                            
                            " vim: sw=2 sts=2 et

SCRIPT  /usr/local/share/nvim/runtime/syntax/go.vim
Sourced 105 times
Total time:   0.163240
 Self time:   0.140573

count  total (s)   self (s)
                            " Copyright 2009 The Go Authors. All rights reserved.
                            " Use of this source code is governed by a BSD-style
                            " license that can be found in the LICENSE file.
                            "
                            " go.vim: Vim syntax file for Go.
                            " Language:             Go
                            " Maintainer:           Billie Cleek <bhcleek@gmail.com>
                            " Latest Revision:      2021-09-18
                            " License:              BSD-style. See LICENSE file in source repository.
                            " Repository:           https://github.com/fatih/vim-go
                            
                            " Quit when a (custom) syntax file was already loaded
  105              0.000576 if exists("b:current_syntax")
                              finish
  105              0.000095 endif
                            
  105              0.000752 let s:keepcpo = &cpo
  105   0.001233   0.001030 set cpo&vim
                            
  105              0.000408 function! s:FoldEnable(...) abort
                              if a:0 > 0
                                return index(s:FoldEnable(), a:1) > -1
                              endif
                              return get(g:, 'go_fold_enable', ['block', 'import', 'varconst', 'package_comment'])
                            endfunction
                            
  105              0.000260 function! s:HighlightArrayWhitespaceError() abort
                              return get(g:, 'go_highlight_array_whitespace_error', 0)
                            endfunction
                            
  105              0.000232 function! s:HighlightChanWhitespaceError() abort
                              return get(g:, 'go_highlight_chan_whitespace_error', 0)
                            endfunction
                            
  105              0.000175 function! s:HighlightExtraTypes() abort
                              return get(g:, 'go_highlight_extra_types', 0)
                            endfunction
                            
  105              0.000191 function! s:HighlightSpaceTabError() abort
                              return get(g:, 'go_highlight_space_tab_error', 0)
                            endfunction
                            
  105              0.000219 function! s:HighlightTrailingWhitespaceError() abort
                              return get(g:, 'go_highlight_trailing_whitespace_error', 0)
                            endfunction
                            
  105              0.000149 function! s:HighlightOperators() abort
                              return get(g:, 'go_highlight_operators', 0)
                            endfunction
                            
  105              0.000200 function! s:HighlightFunctions() abort
                              return get(g:, 'go_highlight_functions', 0)
                            endfunction
                            
  105              0.000182 function! s:HighlightFunctionParameters() abort
                              return get(g:, 'go_highlight_function_parameters', 0)
                            endfunction
                            
  105              0.000154 function! s:HighlightFunctionCalls() abort
                              return get(g:, 'go_highlight_function_calls', 0)
                            endfunction
                            
  105              0.000142 function! s:HighlightFields() abort
                              return get(g:, 'go_highlight_fields', 0)
                            endfunction
                            
  105              0.000137 function! s:HighlightTypes() abort
                              return get(g:, 'go_highlight_types', 0)
                            endfunction
                            
  105              0.000173 function! s:HighlightBuildConstraints() abort
                              return get(g:, 'go_highlight_build_constraints', 0)
                            endfunction
                            
  105              0.000188 function! s:HighlightStringSpellcheck() abort
                              return get(g:, 'go_highlight_string_spellcheck', 1)
                            endfunction
                            
  105              0.000151 function! s:HighlightFormatStrings() abort
                              return get(g:, 'go_highlight_format_strings', 1)
                            endfunction
                            
  105              0.000178 function! s:HighlightGenerateTags() abort
                              return get(g:, 'go_highlight_generate_tags', 0)
                            endfunction
                            
  105              0.000199 function! s:HighlightVariableAssignments() abort
                              return get(g:, 'go_highlight_variable_assignments', 0)
                            endfunction
                            
  105              0.000180 function! s:HighlightVariableDeclarations() abort
                              return get(g:, 'go_highlight_variable_declarations', 0)
                            endfunction
                            
  105              0.000139 syn case match
                            
  105              0.000561 syn keyword     goPackage           package
  105              0.000328 syn keyword     goImport            import    contained
  105              0.000214 syn keyword     goVar               var       contained
  105              0.000221 syn keyword     goConst             const     contained
                            
  105              0.000322 hi def link     goPackage           Statement
  105              0.000172 hi def link     goImport            Statement
  105              0.000166 hi def link     goVar               Keyword
  105              0.000186 hi def link     goConst             Keyword
  105              0.000177 hi def link     goDeclaration       Keyword
                            
                            " Keywords within functions
  105              0.000544 syn keyword     goStatement         defer go goto return break continue fallthrough
  105              0.000428 syn keyword     goConditional       if else switch select
  105              0.000290 syn keyword     goLabel             case default
  105              0.000287 syn keyword     goRepeat            for range
                            
  105              0.000146 hi def link     goStatement         Statement
  105              0.000145 hi def link     goConditional       Conditional
  105              0.000134 hi def link     goLabel             Label
  105              0.000156 hi def link     goRepeat            Repeat
                            
                            " Predefined types
  105              0.000343 syn keyword     goType              chan map bool string error
  105              0.000324 syn keyword     goSignedInts        int int8 int16 int32 int64 rune
  105              0.000387 syn keyword     goUnsignedInts      byte uint uint8 uint16 uint32 uint64 uintptr
  105              0.000291 syn keyword     goFloats            float32 float64
  105              0.000274 syn keyword     goComplexes         complex64 complex128
                            
  105              0.000155 hi def link     goType              Type
  105              0.000143 hi def link     goSignedInts        Type
  105              0.000127 hi def link     goUnsignedInts      Type
  105              0.000120 hi def link     goFloats            Type
  105              0.000129 hi def link     goComplexes         Type
                            
                            " Predefined functions and values
  105              0.001517 syn keyword     goBuiltins                 append cap close complex copy delete imag len
  105              0.000592 syn keyword     goBuiltins                 make new panic print println real recover
  105              0.000268 syn keyword     goBoolean                  true false
  105              0.000234 syn keyword     goPredefinedIdentifiers    nil iota
                            
  105              0.000173 hi def link     goBuiltins                 Identifier
  105              0.000167 hi def link     goBoolean                  Boolean
  105              0.000152 hi def link     goPredefinedIdentifiers    goBoolean
                            
                            " Comments; their contents
  105              0.000284 syn keyword     goTodo              contained TODO FIXME XXX BUG
  105              0.000399 syn cluster     goCommentGroup      contains=goTodo
                            
  105              0.001403 syn region      goComment           start="//" end="$" contains=goGenerate,@goCommentGroup,@Spell
  105   0.003818   0.001168 if s:FoldEnable('comment')
                              syn region    goComment           start="/\*" end="\*/" contains=@goCommentGroup,@Spell fold
                              syn match     goComment           "\v(^\s*//.*\n)+" contains=goGenerate,@goCommentGroup,@Spell fold
  105              0.000119 else
  105              0.000841   syn region    goComment           start="/\*" end="\*/" contains=@goCommentGroup,@Spell
  105              0.000104 endif
                            
  105              0.000164 hi def link     goComment           Comment
  105              0.000172 hi def link     goTodo              Todo
                            
  105   0.001568   0.001032 if s:HighlightGenerateTags()
                              syn match       goGenerateVariables contained /\%(\$GOARCH\|\$GOOS\|\$GOFILE\|\$GOLINE\|\$GOPACKAGE\|\$DOLLAR\)\>/
                              syn region      goGenerate          start="^\s*//go:generate" end="$" contains=goGenerateVariables
                              hi def link     goGenerate          PreProc
                              hi def link     goGenerateVariables Special
  105              0.000084 endif
                            
                            " Go escapes
  105              0.000583 syn match       goEscapeOctal       display contained "\\[0-7]\{3}"
  105              0.000477 syn match       goEscapeC           display contained +\\[abfnrtv\\'"]+
  105              0.000370 syn match       goEscapeX           display contained "\\x\x\{2}"
  105              0.000371 syn match       goEscapeU           display contained "\\u\x\{4}"
  105              0.000373 syn match       goEscapeBigU        display contained "\\U\x\{8}"
  105              0.000511 syn match       goEscapeError       display contained +\\[^0-7xuUabfnrtv\\'"]+
                            
  105              0.000198 hi def link     goEscapeOctal       goSpecialString
  105              0.000170 hi def link     goEscapeC           goSpecialString
  105              0.000135 hi def link     goEscapeX           goSpecialString
  105              0.000134 hi def link     goEscapeU           goSpecialString
  105              0.000140 hi def link     goEscapeBigU        goSpecialString
  105              0.000152 hi def link     goSpecialString     Special
  105              0.000143 hi def link     goEscapeError       Error
                            
                            " Strings and their contents
  105              0.000617 syn cluster     goStringGroup       contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU,goEscapeError
  105   0.001447   0.000992 if s:HighlightStringSpellcheck()
  105              0.001226   syn region      goString            start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=@goStringGroup,@Spell
  105              0.000714   syn region      goRawString         start=+`+ end=+`+ contains=@Spell
                            else
                              syn region      goString            start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=@goStringGroup
                              syn region      goRawString         start=+`+ end=+`+
  105              0.000080 endif
                            
  105   0.001230   0.000830 if s:HighlightFormatStrings()
                              " [n] notation is valid for specifying explicit argument indexes
                              " 1. Match a literal % not preceded by a %.
                              " 2. Match any number of -, #, 0, space, or +
                              " 3. Match * or [n]* or any number or nothing before a .
                              " 4. Match * or [n]* or any number or nothing after a .
                              " 5. Match [n] or nothing before a verb
                              " 6. Match a formatting verb
  105              0.002288   syn match       goFormatSpecifier   /\
                                    \%([^%]\%(%%\)*\)\
                                    \@<=%[-#0 +]*\
                                    \%(\%(\%(\[\d\+\]\)\=\*\)\|\d\+\)\=\
                                    \%(\.\%(\%(\%(\[\d\+\]\)\=\*\)\|\d\+\)\=\)\=\
                                    \%(\[\d\+\]\)\=[vTtbcdoqxXUeEfFgGspw]/ contained containedin=goString,goRawString
  105              0.000220   hi def link     goFormatSpecifier   goSpecialString
  105              0.000076 endif
                            
  105              0.000206 hi def link     goString            String
  105              0.000215 hi def link     goRawString         String
                            
                            " Characters; their contents
  105              0.000686 syn cluster     goCharacterGroup    contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU
  105              0.001048 syn region      goCharacter         start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=@goCharacterGroup
                            
  105              0.000182 hi def link     goCharacter         Character
                            
                            " Regions
  105              0.000598 syn region      goParen             start='(' end=')' transparent
  105   0.003406   0.000856 if s:FoldEnable('block')
  105              0.000730   syn region    goBlock             start="{" end="}" transparent fold
                            else
                              syn region    goBlock             start="{" end="}" transparent
  105              0.000108 endif
                            
                            " import
  105   0.002792   0.000894 if s:FoldEnable('import')
  105              0.001145   syn region    goImport            start='import (' end=')' transparent fold contains=goImport,goString,goComment
                            else
                              syn region    goImport            start='import (' end=')' transparent contains=goImport,goString,goComment
  105              0.000076 endif
                            
                            " var, const
  105   0.002519   0.000704 if s:FoldEnable('varconst')
  105              0.001952   syn region    goVar               start='var ('   end='^\s*)$' transparent fold
                                                    \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
  105              0.001447   syn region    goConst             start='const (' end='^\s*)$' transparent fold
                                                    \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
                            else
                              syn region    goVar               start='var ('   end='^\s*)$' transparent
                                                    \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
                              syn region    goConst             start='const (' end='^\s*)$' transparent
                                                    \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
  105              0.000088 endif
                            
                            " Single-line var, const, and import.
  105              0.001108 syn match       goSingleDecl        /\%(import\|var\|const\) [^(]\@=/ contains=goImport,goVar,goConst
                            
                            " Integers
  105              0.001190 syn match       goDecimalInt        "\<-\=\(0\|[1-9]_\?\(\d\|\d\+_\?\d\+\)*\)\%([Ee][-+]\=\d\+\)\=\>"
  105              0.001596 syn match       goDecimalError      "\<-\=\(_\(\d\+_*\)\+\|\([1-9]\d*_*\)\+__\(\d\+_*\)\+\|\([1-9]\d*_*\)\+_\+\)\%([Ee][-+]\=\d\+\)\=\>"
  105              0.000904 syn match       goHexadecimalInt    "\<-\=0[xX]_\?\(\x\+_\?\)\+\>"
  105              0.001114 syn match       goHexadecimalError  "\<-\=0[xX]_\?\(\x\+_\?\)*\(\([^ \t0-9A-Fa-f_)]\|__\)\S*\|_\)\>"
  105              0.000672 syn match       goOctalInt          "\<-\=0[oO]\?_\?\(\o\+_\?\)\+\>"
  105              0.001378 syn match       goOctalError        "\<-\=0[0-7oO_]*\(\([^ \t0-7oOxX_/)\]\}\:;]\|[oO]\{2,\}\|__\)\S*\|_\|[oOxX]\)\>"
  105              0.000831 syn match       goBinaryInt         "\<-\=0[bB]_\?\([01]\+_\?\)\+\>"
  105              0.000924 syn match       goBinaryError       "\<-\=0[bB]_\?[01_]*\([^ \t01_)]\S*\|__\S*\|_\)\>"
                            
  105              0.000286 hi def link     goDecimalInt        Integer
  105              0.000159 hi def link     goDecimalError      Error
  105              0.000155 hi def link     goHexadecimalInt    Integer
  105              0.000142 hi def link     goHexadecimalError  Error
  105              0.000140 hi def link     goOctalInt          Integer
  105              0.000128 hi def link     goOctalError        Error
  105              0.000201 hi def link     goBinaryInt         Integer
  105              0.000140 hi def link     goBinaryError       Error
  105              0.000139 hi def link     Integer             Number
                            
                            " Floating point
  105              0.000791 syn match       goFloat             "\<-\=\d\+\.\d*\%([Ee][-+]\=\d\+\)\=\>"
  105              0.000771 syn match       goFloat             "\<-\=\.\d\+\%([Ee][-+]\=\d\+\)\=\>"
                            
  105              0.000146 hi def link     goFloat             Float
                            
                            " Imaginary literals
  105              0.000468 syn match       goImaginary         "\<-\=\d\+i\>"
  105              0.000561 syn match       goImaginary         "\<-\=\d\+[Ee][-+]\=\d\+i\>"
  105              0.000779 syn match       goImaginaryFloat    "\<-\=\d\+\.\d*\%([Ee][-+]\=\d\+\)\=i\>"
  105              0.000716 syn match       goImaginaryFloat    "\<-\=\.\d\+\%([Ee][-+]\=\d\+\)\=i\>"
                            
  105              0.000184 hi def link     goImaginary         Number
  105              0.000151 hi def link     goImaginaryFloat    Float
                            
                            " Spaces after "[]"
  105   0.001906   0.001271 if s:HighlightArrayWhitespaceError()
                              syn match goSpaceError display "\%(\[\]\)\@<=\s\+"
  105              0.000102 endif
                            
                            " Spacing errors around the 'chan' keyword
  105   0.001329   0.000939 if s:HighlightChanWhitespaceError()
                              " receive-only annotation on chan type
                              "
                              " \(\<chan\>\)\@<!<-  (only pick arrow when it doesn't come after a chan)
                              " this prevents picking up 'chan<- chan<-' but not '<- chan'
                              syn match goSpaceError display "\%(\%(\<chan\>\)\@<!<-\)\@<=\s\+\%(\<chan\>\)\@="
                            
                              " send-only annotation on chan type
                              "
                              " \(<-\)\@<!\<chan\>  (only pick chan when it doesn't come after an arrow)
                              " this prevents picking up '<-chan <-chan' but not 'chan <-'
                              syn match goSpaceError display "\%(\%(<-\)\@<!\<chan\>\)\@<=\s\+\%(<-\)\@="
                            
                              " value-ignoring receives in a few contexts
                              syn match goSpaceError display "\%(\%(^\|[={(,;]\)\s*<-\)\@<=\s\+"
  105              0.000080 endif
                            
                            " Extra types commonly seen
  105   0.001552   0.001141 if s:HighlightExtraTypes()
                              syn match goExtraType /\<bytes\.\%(Buffer\)\>/
                              syn match goExtraType /\<context\.\%(Context\)\>/
                              syn match goExtraType /\<io\.\%(Reader\|ReadSeeker\|ReadWriter\|ReadCloser\|ReadWriteCloser\|Writer\|WriteCloser\|Seeker\)\>/
                              syn match goExtraType /\<reflect\.\%(Kind\|Type\|Value\)\>/
                              syn match goExtraType /\<unsafe\.Pointer\>/
  105              0.000086 endif
                            
                            " Space-tab error
  105   0.001199   0.000788 if s:HighlightSpaceTabError()
                              syn match goSpaceError display " \+\t"me=e-1
  105              0.000094 endif
                            
                            " Trailing white space error
  105   0.001391   0.000998 if s:HighlightTrailingWhitespaceError()
                              syn match goSpaceError display excludenl "\s\+$"
  105              0.000077 endif
                            
  105              0.000195 hi def link     goExtraType         Type
  105              0.000165 hi def link     goSpaceError        Error
                            
                            
                            
                            " included from: https://github.com/athom/more-colorful.vim/blob/master/after/syntax/go.vim
                            "
                            " Comments; their contents
  105              0.000273 syn keyword     goTodo              contained NOTE
  105              0.000135 hi def link     goTodo              Todo
                            
  105              0.000454 syn match goVarArgs /\.\.\./
                            
                            " Operators;
  105   0.001132   0.000771 if s:HighlightOperators()
                              " match single-char operators:          - + % < > ! & | ^ * =
                              " and corresponding two-char operators: -= += %= <= >= != &= |= ^= *= ==
                              syn match goOperator /[-+%<>!&|^*=]=\?/
                              " match / and /=
                              syn match goOperator /\/\%(=\|\ze[^/*]\)/
                              " match two-char operators:               << >> &^
                              " and corresponding three-char operators: <<= >>= &^=
                              syn match goOperator /\%(<<\|>>\|&^\)=\?/
                              " match remaining two-char operators: := && || <- ++ --
                              syn match goOperator /:=\|||\|<-\|++\|--/
                              " match ...
                            
                              hi def link     goPointerOperator   goOperator
                              hi def link     goVarArgs           goOperator
  105              0.000077 endif
  105              0.000235 hi def link     goOperator          Operator
                            
                            " Functions;
  105   0.002436   0.001710 if s:HighlightFunctions() || s:HighlightFunctionParameters()
                              syn match goDeclaration       /\<func\>/ nextgroup=goReceiver,goFunction,goSimpleParams skipwhite skipnl
                              syn match goReceiverVar       /\w\+\ze\s\+\%(\w\|\*\)/ nextgroup=goPointerOperator,goReceiverType skipwhite skipnl contained
                              syn match goPointerOperator   /\*/ nextgroup=goReceiverType contained skipwhite skipnl
                              syn match goFunction          /\w\+/ nextgroup=goSimpleParams contained skipwhite skipnl
                              syn match goReceiverType      /\w\+/ contained
                              if s:HighlightFunctionParameters()
                                syn match goSimpleParams      /(\%(\w\|\_s\|[*\.\[\],\{\}<>-]\)*)/ contained contains=goParamName,goType nextgroup=goFunctionReturn skipwhite skipnl
                                syn match goFunctionReturn   /(\%(\w\|\_s\|[*\.\[\],\{\}<>-]\)*)/ contained contains=goParamName,goType skipwhite skipnl
                                syn match goParamName        /\w\+\%(\s*,\s*\w\+\)*\ze\s\+\%(\w\|\.\|\*\|\[\)/ contained nextgroup=goParamType skipwhite skipnl
                                syn match goParamType        /\%([^,)]\|\_s\)\+,\?/ contained nextgroup=goParamName skipwhite skipnl
                                                      \ contains=goVarArgs,goType,goSignedInts,goUnsignedInts,goFloats,goComplexes,goDeclType,goBlock
                                hi def link   goReceiverVar    goParamName
                                hi def link   goParamName      Identifier
                              endif
                              syn match goReceiver          /(\s*\w\+\%(\s\+\*\?\s*\w\+\)\?\s*)\ze\s*\w/ contained nextgroup=goFunction contains=goReceiverVar skipwhite skipnl
  105              0.000094 else
  105              0.000391   syn keyword goDeclaration func
  105              0.000082 endif
  105              0.000199 hi def link     goFunction          Function
                            
                            " Function calls;
  105   0.001442   0.000950 if s:HighlightFunctionCalls()
                              syn match goFunctionCall      /\w\+\ze(/ contains=goBuiltins,goDeclaration
  105              0.000131 endif
  105              0.000195 hi def link     goFunctionCall      Type
                            
                            " Fields;
  105   0.001076   0.000737 if s:HighlightFields()
                              " 1. Match a sequence of word characters coming after a '.'
                              " 2. Require the following but dont match it: ( \@= see :h E59)
                              "    - The symbols: / - + * %   OR
                              "    - The symbols: [] {} <> )  OR
                              "    - The symbols: \n \r space OR
                              "    - The symbols: , : .
                              " 3. Have the start of highlight (hs) be the start of matched
                              "    pattern (s) offsetted one to the right (+1) (see :h E401)
                              syn match       goField   /\.\w\+\
                                    \%(\%([\/\-\+*%]\)\|\
                                    \%([\[\]{}<\>\)]\)\|\
                                    \%([\!=\^|&]\)\|\
                                    \%([\n\r\ ]\)\|\
                                    \%([,\:.]\)\)\@=/hs=s+1
  105              0.000097 endif
  105              0.000208 hi def link    goField              Identifier
                            
                            " Structs & Interfaces;
  105   0.001030   0.000702 if s:HighlightTypes()
                              syn match goTypeConstructor      /\<\w\+{\@=/
                              syn match goTypeDecl             /\<type\>/ nextgroup=goTypeName skipwhite skipnl
                              syn match goTypeName             /\w\+/ contained nextgroup=goDeclType skipwhite skipnl
                              syn match goDeclType             /\<\%(interface\|struct\)\>/ skipwhite skipnl
                              hi def link     goReceiverType      Type
  105              0.000080 else
  105              0.000387   syn keyword goDeclType           struct interface
  105              0.000335   syn keyword goDeclaration        type
  105              0.000077 endif
  105              0.000172 hi def link     goTypeConstructor   Type
  105              0.000140 hi def link     goTypeName          Type
  105              0.000149 hi def link     goTypeDecl          Keyword
  105              0.000134 hi def link     goDeclType          Keyword
                            
                            " Variable Assignments
  105   0.001326   0.000926 if s:HighlightVariableAssignments()
                              syn match goVarAssign /\v[_.[:alnum:]]+(,\s*[_.[:alnum:]]+)*\ze(\s*([-^+|^\/%&]|\*|\<\<|\>\>|\&\^)?\=[^=])/
                              hi def link   goVarAssign         Special
  105              0.000074 endif
                            
                            " Variable Declarations
  105   0.001179   0.000821 if s:HighlightVariableDeclarations()
                              syn match goVarDefs /\v\w+(,\s*\w+)*\ze(\s*:\=)/
                              hi def link   goVarDefs           Special
  105              0.000110 endif
                            
                            " Build Constraints
  105   0.001213   0.000822 if s:HighlightBuildConstraints()
                              syn match   goBuildKeyword      display contained "+build\|go:build"
                              " Highlight the known values of GOOS, GOARCH, and other +build options.
                              syn keyword goBuildDirectives   contained
                                    \ android darwin dragonfly freebsd linux nacl netbsd openbsd plan9
                                    \ solaris windows 386 amd64 amd64p32 arm armbe arm64 arm64be ppc64
                                    \ ppc64le mips mipsle mips64 mips64le mips64p32 mips64p32le ppc
                                    \ s390 s390x sparc sparc64 cgo ignore race
                            
                              " Other words in the build directive are build tags not listed above, so
                              " avoid highlighting them as comments by using a matchgroup just for the
                              " start of the comment.
                              " The rs=s+2 option lets the \s*+build portion be part of the inner region
                              " instead of the matchgroup so it will be highlighted as a goBuildKeyword.
                              syn region  goBuildComment      matchgroup=goBuildCommentStart
                                    \ start="//\s*+build\s"rs=s+2 end="$"
                                    \ contains=goBuildKeyword,goBuildDirectives
                              hi def link goBuildCommentStart Comment
                              hi def link goBuildDirectives   Type
                              hi def link goBuildKeyword      PreProc
  105              0.000073 endif
                            
  105   0.003970   0.001437 if s:HighlightBuildConstraints() || s:FoldEnable('package_comment')
                              " One or more line comments that are followed immediately by a "package"
                              " declaration are treated like package documentation, so these must be
                              " matched as comments to avoid looking like working build constraints.
                              " The he, me, and re options let the "package" itself be highlighted by
                              " the usual rules.
  105   0.005189   0.003386   exe 'syn region  goPackageComment    start=/\v(\/\/.*\n)+\s*package/'
                                    \ . ' end=/\v\n\s*package/he=e-7,me=e-7,re=e-7'
                                    \ . ' contains=@goCommentGroup,@Spell'
                                    \ . (s:FoldEnable('package_comment') ? ' fold' : '')
  105   0.004839   0.003006   exe 'syn region  goPackageComment    start=/\v^\s*\/\*.*\n(.*\n)*\s*\*\/\npackage/'
                                    \ . ' end=/\v\*\/\n\s*package/he=e-7,me=e-7,re=e-7'
                                    \ . ' contains=@goCommentGroup,@Spell'
                                    \ . (s:FoldEnable('package_comment') ? ' fold' : '')
  105              0.000217   hi def link goPackageComment    Comment
  105              0.000092 endif
                            
                            " :GoCoverage commands
  105              0.000176 hi def link goCoverageNormalText Comment
                            
                            " Search backwards for a global declaration to start processing the syntax.
                            "syn sync match goSync grouphere NONE /^\(const\|var\|type\|func\)\>/
                            
                            " There's a bug in the implementation of grouphere. For now, use the
                            " following as a more expensive/less precise workaround.
  105              0.000418 syn sync minlines=500
                            
  105              0.000380 let b:current_syntax = "go"
                            
  105   0.001465   0.001113 let &cpo = s:keepcpo
  105              0.000257 unlet s:keepcpo
                            
                            " vim: sw=2 sts=2 et

SCRIPT  /home/mert/.vim/plugged/telescope.nvim/ftplugin/TelescopePrompt.lua
Sourced 4 times
Total time:   0.001701
 Self time:   0.001701

count  total (s)   self (s)
                            -- Don't wrap textwidth things
                            vim.opt_local.formatoptions:remove "t"
                            vim.opt_local.formatoptions:remove "c"
                            
                            -- There's also no reason to enable textwidth here anyway
                            vim.opt_local.textwidth = 0

SCRIPT  /home/mert/.vim/plugged/telescope.nvim/ftplugin/TelescopeResults.lua
Sourced 4 times
Total time:   0.000461
 Self time:   0.000461

count  total (s)   self (s)
                            -- Don't have scrolloff, it makes things weird.
                            vim.opt_local.scrolloff = 0

SCRIPT  /usr/local/share/nvim/runtime/scripts.vim
Sourced 1 time
Total time:   0.069674
 Self time:   0.069674

count  total (s)   self (s)
                            " Vim support file to detect file types in scripts
                            "
                            " Maintainer:	Bram Moolenaar <Bram@vim.org>
                            " Last change:	2021 Jan 22
                            
                            " This file is called by an autocommand for every file that has just been
                            " loaded into a buffer.  It checks if the type of file can be recognized by
                            " the file contents.  The autocommand is in $VIMRUNTIME/filetype.vim.
                            "
                            " Note that the pattern matches are done with =~# to avoid the value of the
                            " 'ignorecase' option making a difference.  Where case is to be ignored use
                            " =~? instead.  Do not use =~ anywhere.
                            
                            
                            " Only do the rest when the FileType autocommand has not been triggered yet.
    1              0.000004 if did_filetype()
                              finish
    1              0.000001 endif
                            
                            " Load the user defined scripts file first
                            " Only do this when the FileType autocommand has not been triggered yet
    1              0.000005 if exists("myscriptsfile") && filereadable(expand(myscriptsfile))
                              execute "source " . myscriptsfile
                              if did_filetype()
                                finish
                              endif
    1              0.000001 endif
                            
                            " Line continuation is used here, remove 'C' from 'cpoptions'
    1              0.000007 let s:cpo_save = &cpo
    1              0.000010 set cpo&vim
                            
    1              0.000030 let s:line1 = getline(1)
                            
    1              0.000031 if s:line1 =~# "^#!"
                              " A script that starts with "#!".
                            
                              " Check for a line like "#!/usr/bin/env {options} bash".  Turn it into
                              " "#!/usr/bin/bash" to make matching easier.
                              " Recognize only a few {options} that are commonly used.
                              if s:line1 =~# '^#!\s*\S*\<env\s'
                                let s:line1 = substitute(s:line1, '\S\+=\S\+', '', 'g')
                                let s:line1 = substitute(s:line1, '\(-[iS]\|--ignore-environment\|--split-string\)', '', '')
                                let s:line1 = substitute(s:line1, '\<env\s\+', '', '')
                              endif
                            
                              " Get the program name.
                              " Only accept spaces in PC style paths: "#!c:/program files/perl [args]".
                              " If the word env is used, use the first word after the space:
                              " "#!/usr/bin/env perl [path/args]"
                              " If there is no path use the first word: "#!perl [path/args]".
                              " Otherwise get the last word after a slash: "#!/usr/bin/perl [path/args]".
                              if s:line1 =~# '^#!\s*\a:[/\\]'
                                let s:name = substitute(s:line1, '^#!.*[/\\]\(\i\+\).*', '\1', '')
                              elseif s:line1 =~# '^#!.*\<env\>'
                                let s:name = substitute(s:line1, '^#!.*\<env\>\s\+\(\i\+\).*', '\1', '')
                              elseif s:line1 =~# '^#!\s*[^/\\ ]*\>\([^/\\]\|$\)'
                                let s:name = substitute(s:line1, '^#!\s*\([^/\\ ]*\>\).*', '\1', '')
                              else
                                let s:name = substitute(s:line1, '^#!\s*\S*[/\\]\(\i\+\).*', '\1', '')
                              endif
                            
                              " tcl scripts may have #!/bin/sh in the first line and "exec wish" in the
                              " third line.  Suggested by Steven Atkinson.
                              if getline(3) =~# '^exec wish'
                                let s:name = 'wish'
                              endif
                            
                              " Bourne-like shell scripts: bash bash2 ksh ksh93 sh
                              if s:name =~# '^\(bash\d*\|\|ksh\d*\|sh\)\>'
                                call dist#ft#SetFileTypeSH(s:line1)	" defined in filetype.vim
                            
                                " csh scripts
                              elseif s:name =~# '^csh\>'
                                if exists("g:filetype_csh")
                                  call dist#ft#SetFileTypeShell(g:filetype_csh)
                                else
                                  call dist#ft#SetFileTypeShell("csh")
                                endif
                            
                                " tcsh scripts
                              elseif s:name =~# '^tcsh\>'
                                call dist#ft#SetFileTypeShell("tcsh")
                            
                                " Z shell scripts
                              elseif s:name =~# '^zsh\>'
                                set ft=zsh
                            
                                " TCL scripts
                              elseif s:name =~# '^\(tclsh\|wish\|expectk\|itclsh\|itkwish\)\>'
                                set ft=tcl
                            
                                " Expect scripts
                              elseif s:name =~# '^expect\>'
                                set ft=expect
                            
                                " Gnuplot scripts
                              elseif s:name =~# '^gnuplot\>'
                                set ft=gnuplot
                            
                                " Makefiles
                              elseif s:name =~# 'make\>'
                                set ft=make
                            
                                " Pike
                              elseif s:name =~# '^pike\%(\>\|[0-9]\)'
                                set ft=pike
                            
                                " Lua
                              elseif s:name =~# 'lua'
                                set ft=lua
                            
                                " Perl
                              elseif s:name =~# 'perl'
                                set ft=perl
                            
                                " PHP
                              elseif s:name =~# 'php'
                                set ft=php
                            
                                " Python
                              elseif s:name =~# 'python'
                                set ft=python
                            
                                " Groovy
                              elseif s:name =~# '^groovy\>'
                                set ft=groovy
                            
                                " Raku
                              elseif s:name =~# 'raku'
                                set ft=raku
                            
                                " Ruby
                              elseif s:name =~# 'ruby'
                                set ft=ruby
                            
                                " JavaScript
                              elseif s:name =~# 'node\(js\)\=\>\|js\>' || s:name =~# 'rhino\>'
                                set ft=javascript
                            
                                " BC calculator
                              elseif s:name =~# '^bc\>'
                                set ft=bc
                            
                                " sed
                              elseif s:name =~# 'sed\>'
                                set ft=sed
                            
                                " OCaml-scripts
                              elseif s:name =~# 'ocaml'
                                set ft=ocaml
                            
                                " Awk scripts; also finds "gawk"
                              elseif s:name =~# 'awk\>'
                                set ft=awk
                            
                                " Website MetaLanguage
                              elseif s:name =~# 'wml'
                                set ft=wml
                            
                                " Scheme scripts
                              elseif s:name =~# 'scheme'
                                set ft=scheme
                            
                                " CFEngine scripts
                              elseif s:name =~# 'cfengine'
                                set ft=cfengine
                            
                                " Erlang scripts
                              elseif s:name =~# 'escript'
                                set ft=erlang
                            
                                " Haskell
                              elseif s:name =~# 'haskell'
                                set ft=haskell
                            
                                " Scala
                              elseif s:name =~# 'scala\>'
                                set ft=scala
                            
                                " Clojure
                              elseif s:name =~# 'clojure'
                                set ft=clojure
                            
                                " Free Pascal
                              elseif s:name =~# 'instantfpc\>'
                                set ft=pascal
                            
                                " Fennel
                              elseif s:name =~# 'fennel\>'
                                set ft=fennel
                            
                              endif
                              unlet s:name
                            
    1              0.000001 else
                              " File does not start with "#!".
                            
    1              0.000004   let s:line2 = getline(2)
    1              0.000002   let s:line3 = getline(3)
    1              0.000003   let s:line4 = getline(4)
    1              0.000002   let s:line5 = getline(5)
                            
                              " Bourne-like shell scripts: sh ksh bash bash2
    1              0.000026   if s:line1 =~# '^:$'
                                call dist#ft#SetFileTypeSH(s:line1)	" defined in filetype.vim
                            
                              " Z shell scripts
    1              0.000237   elseif s:line1 =~# '^#compdef\>' || s:line1 =~# '^#autoload\>' ||
                                    \ "\n".s:line1."\n".s:line2."\n".s:line3."\n".s:line4."\n".s:line5 =~# '\n\s*emulate\s\+\%(-[LR]\s\+\)\=[ckz]\=sh\>'
                                set ft=zsh
                            
                              " ELM Mail files
    1              0.000031   elseif s:line1 =~# '^From \([a-zA-Z][a-zA-Z_0-9\.=-]*\(@[^ ]*\)\=\|-\) .* \(19\|20\)\d\d$'
                                set ft=mail
                            
                              " Mason
    1              0.000024   elseif s:line1 =~# '^<[%&].*>'
                                set ft=mason
                            
                              " Vim scripts (must have '" vim' as the first line to trigger this)
    1              0.000024   elseif s:line1 =~# '^" *[vV]im$'
                                set ft=vim
                            
                              " libcxx and libstdc++ standard library headers like "iostream" do not have
                              " an extension, recognize the Emacs file mode.
    1              0.000031   elseif s:line1 =~? '-\*-.*C++.*-\*-'
                                set ft=cpp
                            
                              " MOO
    1              0.000030   elseif s:line1 =~# '^\*\* LambdaMOO Database, Format Version \%([1-3]\>\)\@!\d\+ \*\*$'
                                set ft=moo
                            
                                " Diff file:
                                " - "diff" in first line (context diff)
                                " - "Only in " in first line
                                " - "--- " in first line and "+++ " in second line (unified diff).
                                " - "*** " in first line and "--- " in second line (context diff).
                                " - "# It was generated by makepatch " in the second line (makepatch diff).
                                " - "Index: <filename>" in the first line (CVS file)
                                " - "=== ", line of "=", "---", "+++ " (SVK diff)
                                " - "=== ", "--- ", "+++ " (bzr diff, common case)
                                " - "=== (removed|added|renamed|modified)" (bzr diff, alternative)
                                " - "# HG changeset patch" in first line (Mercurial export format)
    1              0.000157   elseif s:line1 =~# '^\(diff\>\|Only in \|\d\+\(,\d\+\)\=[cda]\d\+\>\|# It was generated by makepatch \|Index:\s\+\f\+\r\=$\|===== \f\+ \d\+\.\d\+ vs edited\|==== //\f\+#\d\+\|# HG changeset patch\)'
                            	\ || (s:line1 =~# '^--- ' && s:line2 =~# '^+++ ')
                            	\ || (s:line1 =~# '^\* looking for ' && s:line2 =~# '^\* comparing to ')
                            	\ || (s:line1 =~# '^\*\*\* ' && s:line2 =~# '^--- ')
                            	\ || (s:line1 =~# '^=== ' && ((s:line2 =~# '^=\{66\}' && s:line3 =~# '^--- ' && s:line4 =~# '^+++') || (s:line2 =~# '^--- ' && s:line3 =~# '^+++ ')))
                            	\ || (s:line1 =~# '^=== \(removed\|added\|renamed\|modified\)')
                                set ft=diff
                            
                                " PostScript Files (must have %!PS as the first line, like a2ps output)
    1              0.000024   elseif s:line1 =~# '^%![ \t]*PS'
                                set ft=postscr
                            
                                " M4 scripts: Guess there is a line that starts with "dnl".
    1              0.000028   elseif s:line1 =~# '^\s*dnl\>'
                            	\ || s:line2 =~# '^\s*dnl\>'
                            	\ || s:line3 =~# '^\s*dnl\>'
                            	\ || s:line4 =~# '^\s*dnl\>'
                            	\ || s:line5 =~# '^\s*dnl\>'
                                set ft=m4
                            
                                " AmigaDos scripts
    1              0.000004   elseif $TERM == "amiga"
                            	\ && (s:line1 =~# "^;" || s:line1 =~? '^\.bra')
                                set ft=amiga
                            
                                " SiCAD scripts (must have procn or procd as the first line to trigger this)
    1              0.000019   elseif s:line1 =~? '^ *proc[nd] *$'
                                set ft=sicad
                            
                                " Purify log files start with "****  Purify"
    1              0.000024   elseif s:line1 =~# '^\*\*\*\*  Purify'
                                set ft=purifylog
                            
                                " XML
    1              0.000024   elseif s:line1 =~# '<?\s*xml.*?>'
                                set ft=xml
                            
                                " XHTML (e.g.: PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN")
    1              0.000024   elseif s:line1 =~# '\<DTD\s\+XHTML\s'
                                set ft=xhtml
                            
                                " HTML (e.g.: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN")
                                " Avoid "doctype html", used by slim.
    1              0.000029   elseif s:line1 =~? '<!DOCTYPE\s\+html\>'
                                set ft=html
                            
                                " PDF
    1              0.000024   elseif s:line1 =~# '^%PDF-'
                                set ft=pdf
                            
                                " XXD output
    1              0.000023   elseif s:line1 =~# '^\x\{7}: \x\{2} \=\x\{2} \=\x\{2} \=\x\{2} '
                                set ft=xxd
                            
                                " RCS/CVS log output
    1              0.000026   elseif s:line1 =~# '^RCS file:' || s:line2 =~# '^RCS file:'
                                set ft=rcslog
                            
                                " CVS commit
    1              0.000030   elseif s:line2 =~# '^CVS:' || getline("$") =~# '^CVS: '
                                set ft=cvs
                            
                                " Prescribe
    1              0.000023   elseif s:line1 =~# '^!R!'
                                set ft=prescribe
                            
                                " Send-pr
    1              0.000023   elseif s:line1 =~# '^SEND-PR:'
                                set ft=sendpr
                            
                                " SNNS files
    1              0.000025   elseif s:line1 =~# '^SNNS network definition file'
                                set ft=snnsnet
    1              0.000025   elseif s:line1 =~# '^SNNS pattern definition file'
                                set ft=snnspat
    1              0.000024   elseif s:line1 =~# '^SNNS result file'
                                set ft=snnsres
                            
                                " Virata
    1              0.000035   elseif s:line1 =~# '^%.\{-}[Vv]irata'
                            	\ || s:line2 =~# '^%.\{-}[Vv]irata'
                            	\ || s:line3 =~# '^%.\{-}[Vv]irata'
                            	\ || s:line4 =~# '^%.\{-}[Vv]irata'
                            	\ || s:line5 =~# '^%.\{-}[Vv]irata'
                                set ft=virata
                            
                                " Strace
    1              0.014828   elseif s:line1 =~# '[0-9:.]* *execve(' || s:line1 =~# '^__libc_start_main'
                                set ft=strace
                            
                                " VSE JCL
    1              0.000052   elseif s:line1 =~# '^\* $$ JOB\>' || s:line1 =~# '^// *JOB\>'
                                set ft=vsejcl
                            
                                " TAK and SINDA
    1              0.000007   elseif s:line4 =~# 'K & K  Associates' || s:line2 =~# 'TAK 2000'
                                set ft=takout
    1              0.000006   elseif s:line3 =~# 'S Y S T E M S   I M P R O V E D '
                                set ft=sindaout
    1              0.000007   elseif getline(6) =~# 'Run Date: '
                                set ft=takcmp
    1              0.000004   elseif getline(9) =~# 'Node    File  1'
                                set ft=sindacmp
                            
                                " DNS zone files
    1              0.048843   elseif s:line1.s:line2.s:line3.s:line4 =~# '^; <<>> DiG [0-9.]\+.* <<>>\|$ORIGIN\|$TTL\|IN\s\+SOA'
                                set ft=bindzone
                            
                                " BAAN
    1              0.003761   elseif s:line1 =~# '|\*\{1,80}' && s:line2 =~# 'VRC '
                            	\ || s:line2 =~# '|\*\{1,80}' && s:line3 =~# 'VRC '
                                set ft=baan
                            
                              " Valgrind
    1              0.000062   elseif s:line1 =~# '^==\d\+== valgrind' || s:line3 =~# '^==\d\+== Using valgrind'
                                set ft=valgrind
                            
                              " Go docs
    1              0.000027   elseif s:line1 =~# '^PACKAGE DOCUMENTATION$'
                                set ft=godoc
                            
                              " Renderman Interface Bytestream
    1              0.000024   elseif s:line1 =~# '^##RenderMan'
                                set ft=rib
                            
                              " Scheme scripts
    1              0.000071   elseif s:line1 =~# 'exec\s\+\S*scheme' || s:line2 =~# 'exec\s\+\S*scheme'
                                set ft=scheme
                            
                              " Git output
    1              0.000043   elseif s:line1 =~# '^\(commit\|tree\|object\) \x\{40\}\>\|^tag \S\+$'
                                set ft=git
                            
                               " Gprof (gnu profiler)
    1              0.000018    elseif s:line1 == 'Flat profile:'
                                 \ && s:line2 == ''
                                 \ && s:line3 =~# '^Each sample counts as .* seconds.$'
                                 set ft=gprof
                            
                              " Erlang terms
                              " (See also: http://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes)
    1              0.000031   elseif s:line1 =~? '-\*-.*erlang.*-\*-'
                                set ft=erlang
                            
                              " YAML
    1              0.000023   elseif s:line1 =~# '^%YAML'
                                set ft=yaml
                            
                              " CVS diff
    1              0.000001   else
    1              0.000005     let s:lnum = 1
    1              0.000045     while getline(s:lnum) =~# "^? " && s:lnum < line("$")
                                  let s:lnum += 1
    1              0.000001     endwhile
    1              0.000026     if getline(s:lnum) =~# '^Index:\s\+\f\+$'
                                  set ft=diff
                            
                                  " locale input files: Formal Definitions of Cultural Conventions
                                  " filename must be like en_US, fr_FR@euro or en_US.UTF-8
    1              0.000016     elseif expand("%") =~# '\a\a_\a\a\($\|[.@]\)\|i18n$\|POSIX$\|translit_'
                                  let s:lnum = 1
                                  while s:lnum < 100 && s:lnum < line("$")
                            	if getline(s:lnum) =~# '^LC_\(IDENTIFICATION\|CTYPE\|COLLATE\|MONETARY\|NUMERIC\|TIME\|MESSAGES\|PAPER\|TELEPHONE\|MEASUREMENT\|NAME\|ADDRESS\)$'
                            	  setf fdcc
                            	  break
                            	endif
                            	let s:lnum += 1
                                  endwhile
    1              0.000001     endif
    1              0.000002     unlet s:lnum
                            
    1              0.000001   endif
                            
    1              0.000003   unlet s:line2 s:line3 s:line4 s:line5
                            
    1              0.000000 endif
                            
                            " Restore 'cpoptions'
    1              0.000027 let &cpo = s:cpo_save
                            
    1              0.000007 unlet s:cpo_save s:line1

FUNCTION  <SNR>76_HighlightFunctionParameters()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:55
Called 1 time
Total time:   0.000003
 Self time:   0.000003

count  total (s)   self (s)
    1              0.000002   return get(g:, 'go_highlight_function_parameters', 0)

FUNCTION  coc#snippet#_select_mappings()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/snippet.vim:5
Called 2 times
Total time:   0.000981
 Self time:   0.000981

count  total (s)   self (s)
    2              0.000007   if !get(g:, 'coc_selectmode_mapping', 1)
                                return
    2              0.000001   endif
                            
    2              0.000008   redir => mappings
    2              0.000526     silent! smap
    2              0.000012   redir END
                            
    2              0.000296   for map in map(filter(split(mappings, '\n'), "v:val !~# '^s' && v:val !~# '^\\a*\\s*<\\S\\+>'"), "matchstr(v:val, '^\\a*\\s*\\zs\\S\\+')")
                                silent! execute 'sunmap' map
                                silent! execute 'sunmap <buffer>' map
    2              0.000002   endfor
                            
                              " same behaviour of ultisnips
    2              0.000038   snoremap <silent> <BS> <c-g>c
    2              0.000038   snoremap <silent> <DEL> <c-g>c
    2              0.000009   snoremap <silent> <c-h> <c-g>c
    2              0.000010   snoremap <c-r> <c-g>"_c<c-r>

FUNCTION  airline#extensions#quickfix#inactive_qf_window()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim:28
Called 651 times
Total time:   0.008814
 Self time:   0.008814

count  total (s)   self (s)
  651              0.005804   if getbufvar(a:2.bufnr, '&filetype') is# 'qf' && !empty(airline#util#getwinvar(a:2.winnr, 'quickfix_title', ''))
                                call setwinvar(a:2.winnr, 'airline_section_c', '[%{get(w:, "quickfix_title", "")}] %f %m')
  651              0.000489   endif

FUNCTION  <SNR>95_get_section()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/default.vim:20
Called 5097 times
Total time:   0.281932
 Self time:   0.229147

count  total (s)   self (s)
 5097              0.016518   if has_key(s:section_truncate_width, a:key)
 2901   0.060772   0.028688     if airline#util#winwidth(a:winnr) < s:section_truncate_width[a:key]
  214              0.000209       return ''
 2687              0.001702     endif
 4883              0.002857   endif
 4883              0.011730   let spc = g:airline_symbols.space
 4883              0.021217   if !exists('g:airline_section_{a:key}')
                                return ''
 4883              0.002635   endif
 4883   0.077654   0.056954   let text = airline#util#getwinvar(a:winnr, 'airline_section_'.a:key, g:airline_section_{a:key})
 4883              0.039453   let [prefix, suffix] = [get(a:000, 0, '%('.spc), get(a:000, 1, spc.'%)')]
 4883              0.019943   return empty(text) ? '' : prefix.text.suffix

FUNCTION  coc#helper#obj_equal()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/helper.vim:12
Called 47 times
Total time:   0.001950
 Self time:   0.001950

count  total (s)   self (s)
  160              0.000594   for key in keys(a:one)
  135              0.000596     if a:one[key] != a:two[key]
   22              0.000023       return 0
  113              0.000081     endif
  138              0.000104   endfor
   25              0.000036   return 1

FUNCTION  coc#client#get_channel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:149
Called 4274 times
Total time:   0.046212
 Self time:   0.046212

count  total (s)   self (s)
 4274              0.010355   if s:is_vim
                                return a:client['channel']
 4274              0.003825   endif
 4274              0.013304   return a:client['chan_id']

FUNCTION  coc#snippet#enable()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/snippet.vim:36
Called 2 times
Total time:   0.001249
 Self time:   0.000268

count  total (s)   self (s)
    2              0.000011   if get(b:, 'coc_snippet_active', 0) == 1
                                return
    2              0.000001   endif
    2              0.000005   let b:coc_snippet_active = 1
    2              0.000040   silent! unlet g:coc_selected_text
    2   0.001003   0.000022   call coc#snippet#_select_mappings()
    2              0.000009   let nextkey = get(g:, 'coc_snippet_next', '<C-j>')
    2              0.000005   let prevkey = get(g:, 'coc_snippet_prev', '<C-k>')
    2              0.000036   if maparg(nextkey, 'i') =~# 'expand-jump'
                                let s:map_next = 0
    2              0.000001   endif
    2              0.000003   if s:map_next
    2              0.000029     execute 'inoremap <buffer><nowait><silent>'.nextkey." <C-R>=coc#rpc#request('snippetNext', [])<cr>"
    2              0.000001   endif
    2              0.000021   execute 'inoremap <buffer><nowait><silent>'.prevkey." <C-R>=coc#rpc#request('snippetPrev', [])<cr>"
    2              0.000023   execute 'snoremap <buffer><nowait><silent>'.prevkey." <Esc>:call coc#rpc#request('snippetPrev', [])<cr>"
    2              0.000033   execute 'snoremap <buffer><nowait><silent>'.nextkey." <Esc>:call coc#rpc#request('snippetNext', [])<cr>"

FUNCTION  coc#highlight#clear_match_group()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:433
Called 102 times
Total time:   0.017266
 Self time:   0.017266

count  total (s)   self (s)
  102              0.001937   let winid = a:winid == 0 ? win_getid() : a:winid
  102              0.002216   if empty(getwininfo(winid))
                                " not valid
                                return
  102              0.000132   endif
  102              0.000300   if s:clear_match_by_window
  102              0.002916     let arr = filter(getmatches(winid), 'v:val["group"] =~# "'.a:match.'"')
  175              0.000579     for item in arr
   73              0.000491       call matchdelete(item['id'], winid)
  175              0.000480     endfor
                              else
                                let curr = win_getid()
                                let switch = exists('*nvim_set_current_win') && curr != winid
                                if switch
                                  noa call nvim_set_current_win(a:winid)
                                endif
                                if win_getid() == winid
                                  let arr = filter(getmatches(), 'v:val["group"] =~# "'.a:match.'"')
                                  for item in arr
                                    call matchdelete(item['id'])
                                  endfor
                                endif
                                if switch
                                  noa call nvim_set_current_win(curr)
                                endif
  102              0.000214   endif

FUNCTION  airline#util#exec_funcrefs()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:93
Called 795 times
Total time:   0.780387
 Self time:   0.064058

count  total (s)   self (s)
 3621              0.006345     for Fn in a:list
 3621   0.759353   0.043024       let code = call(Fn, a:000)
 3621              0.005034       if code != 0
  795              0.000898         return code
 2826              0.001429       endif
 2826              0.001802     endfor
                                return 0

FUNCTION  <SNR>76_HighlightVariableAssignments()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:87
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_variable_assignments', 0)

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:14
Called 4186 times
Total time:   0.264772
 Self time:   0.059539

count  total (s)   self (s)
 4186   0.261880   0.056647   return airline#extensions#coc#get('error')

FUNCTION  coc#float#create_pum_float()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:931
Called 98 times
Total time:   0.405396
 Self time:   0.029449

count  total (s)   self (s)
   98              0.001319   if !pumvisible() || !s:float_supported
                                return v:null
   98              0.000104   endif
   98              0.000627   let pumbounding = a:config['pumbounding']
   98              0.000660   let pw = pumbounding['width'] + get(pumbounding, 'scrollbar', 0)
   98              0.000471   let rp = &columns - pumbounding['col'] - pw
   98              0.000383   let showRight = pumbounding['col'] > rp ? 0 : 1
   98   0.004393   0.001747   let maxWidth = showRight ? coc#helper#min(rp - 1, a:config['maxWidth']) : coc#helper#min(pumbounding['col'] - 1, a:config['maxWidth'])
   98              0.000474   let border = get(a:config, 'border', [])
   98              0.000412   let bh = get(border, 0 ,0) + get(border, 2, 0)
   98              0.000482   let maxHeight = &lines - pumbounding['row'] - &cmdheight - 1 - bh
   98              0.000267   if maxWidth <= 2 || maxHeight < 1
                                return v:null
   98              0.000133   endif
   98              0.000127   let ch = 0
   98              0.000160   let width = 0
  252              0.000404   for line in a:lines
  154              0.000962     let dw = max([1, strdisplaywidth(line)])
  154              0.000502     let width = max([width, dw + 2])
  154              0.001415     let ch += float2nr(ceil(str2float(string(dw))/(maxWidth - 2)))
  252              0.000271   endfor
   98   0.002955   0.000987   let width = float2nr(coc#helper#min(maxWidth, width))
   98   0.002715   0.000897   let height = float2nr(coc#helper#min(maxHeight, ch))
   98   0.003928   0.002697   let lines = map(a:lines, {_, s -> s =~# '^─' ? repeat('─', width - 2 + (s:is_vim && ch > height ? -1 : 0)) : s})
   98              0.001848   let opts = { 'lines': lines, 'relative': 'editor', 'col': showRight ? pumbounding['col'] + pw : pumbounding['col'] - width - 1, 'row': pumbounding['row'], 'height': height, 'width': width - 2 + (s:is_vim && ch > height ? -1 : 0), 'codes': get(a:config, 'codes', []), }
  686              0.001003   for key in ['border', 'highlight', 'borderhighlight', 'winblend', 'focusable', 'shadow']
  588              0.001307     if has_key(a:config, key)
   98              0.000389       let opts[key] = a:config[key]
  588              0.000294     endif
  686              0.000372   endfor
   98   0.018436   0.001213   call coc#float#close_auto_hide_wins(a:winid)
   98   0.322997   0.001601   let res = coc#float#create_float_win(a:winid, a:bufnr, opts)
   98              0.000176   if empty(res)
                                return v:null
   98              0.000045   endif
   98              0.000524   call setwinvar(res[0], 'kind', 'pum')
   98              0.000290   if has('nvim')
   98   0.030922   0.001257     call coc#float#nvim_scrollbar(res[0])
   98              0.000057   endif
   98              0.000107   return res

FUNCTION  <SNR>83_CheckDefined()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:108
Called 50160 times
Total time:   0.865723
 Self time:   0.865723

count  total (s)   self (s)
                                " Checks, whether the definition of the colors is valid and is not empty or NONE
                                " e.g. if the colors would expand to this:
                                " hi airline_c ctermfg=NONE ctermbg=NONE
                                " that means to clear that highlighting group, therefore, fallback to Normal
                                " highlighting group for the cterm values
                            
                                " This only works, if the Normal highlighting group is actually defined, so
                                " return early, if it has been cleared
50160              0.193960     if !exists("g:airline#highlighter#normal_fg_hi")
                                  let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
50160              0.033990     endif
50160              0.182119     if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
50160              0.068965       return a:colors
                                endif
                            
                                for val in a:colors
                                  if !empty(val) && val !=# 'NONE'
                                    return a:colors
                                  endif
                                endfor
                                " this adds the bold attribute to the term argument of the :hi command,
                                " but at least this makes sure, the group will be defined
                                let fg = g:airline#highlighter#normal_fg_hi
                                let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                                if empty(bg) || bg < 0
                                  " in case there is no background color defined for Normal
                                  let bg = a:colors[3]
                                endif
                                return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  coc#highlight#add_highlight()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:233
Called 48 times
Total time:   0.001940
 Self time:   0.001940

count  total (s)   self (s)
   48              0.000177   if has('nvim')
   48              0.001313     call nvim_buf_add_highlight(a:bufnr, a:src_id, a:hl_group, a:line, a:col_start, a:col_end)
                              else
                                call coc#api#call('buf_add_highlight', [a:bufnr, a:src_id, a:hl_group, a:line, a:col_start, a:col_end])
   48              0.000034   endif

FUNCTION  <SNR>76_HighlightOperators()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:47
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_operators', 0)

FUNCTION  coc#util#do_autocmd()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:687
Called 170 times
Total time:   0.004343
 Self time:   0.002188

count  total (s)   self (s)
  170              0.001312   if exists('#User#'.a:name)
    4   0.002441   0.000286     exe 'doautocmd <nomodeline> User '.a:name
  170              0.000108   endif

FUNCTION  <SNR>94_get_accented_line()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:163
Called 3807 times
Total time:   0.207437
 Self time:   0.207437

count  total (s)   self (s)
 3807              0.007415   if a:self._context.active
                                " active window
 1143              0.002116     let contents = []
 1143              0.009860     let content_parts = split(a:contents, '__accent')
 3417              0.005254     for cpart in content_parts
 2274              0.016702       let accent = matchstr(cpart, '_\zs[^#]*\ze')
 2274              0.015919       call add(contents, cpart)
 3417              0.002642     endfor
 1143              0.005102     let line = join(contents, a:group)
 1143              0.009411     let line = substitute(line, '__restore__', a:group, 'g')
 2664              0.001838   else
                                " inactive window
 2664              0.042527     let line = substitute(a:contents, '%#__accent[^#]*#', '', 'g')
 2664              0.020449     let line = substitute(line, '%#__restore__#', '', 'g')
 3807              0.002640   endif
 3807              0.004849   return line

FUNCTION  <SNR>94_get_seperator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:155
Called 2217 times
Total time:   2.745223
 Self time:   0.054544

count  total (s)   self (s)
 2217   0.888251   0.024638   if airline#builder#should_change_group(a:prev_group, a:group)
 2217   1.855357   0.028291     return s:get_transitioned_seperator(a:self, a:prev_group, a:group, a:side)
                              else
                                return a:side ? a:self._context.left_alt_sep : a:self._context.right_alt_sep
                              endif

FUNCTION  airline#check_mode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:216
Called 5053 times
Total time:  35.473424
 Self time:   1.001190

count  total (s)   self (s)
 5053              0.034088   if !has_key(s:contexts, a:winnr)
                                return ''
 5053              0.005898   endif
 5053              0.026593   let context = s:contexts[a:winnr]
                            
 5053              0.024232   if get(w:, 'airline_active', 1)
 4198              0.017973     let m = mode(1)
 4198              0.012877     if m ==# "i"
 1761              0.007725       let mode = ['insert']
 2437              0.008513     elseif m[0] ==# "i"
  885              0.002778       let mode = ['insert']
 1552              0.003156     elseif m ==# "Rv"
                                  let mode =['replace']
 1552              0.003393     elseif m[0] ==# "R"
                                  let mode = ['replace']
 1552              0.026500     elseif m[0] =~# '\v(v|V||s|S|)'
   23              0.000066       let mode = ['visual']
 1529              0.002984     elseif m ==# "t"
    7              0.000025       let mode = ['terminal']
 1522              0.003463     elseif m[0] ==# "c"
   17              0.000103       let mode = ['commandline']
 1505              0.003761     elseif m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
                                  let mode = ['normal']
 1505              0.004944     elseif m[0:1] ==# 'ni'
                                  let mode = ['insert']
                                  let m = 'ni'
 1505              0.001626     else
 1505              0.006882       let mode = ['normal']
 4198              0.004057     endif
 4198              0.032212     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let m = 'multi'
 4198              0.003637     endif
 4198              0.044368     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], m) == -1
 3313              0.011236       let m = m[0]
 4198              0.004119     endif
 4198              0.041256     let w:airline_current_mode = get(g:airline_mode_map, m, m)
  855              0.000581   else
  855              0.002078     let mode = ['inactive']
  855              0.003885     let w:airline_current_mode = get(g:airline_mode_map, '__')
 5053              0.004920   endif
                            
 5053              0.024868   if g:airline_detect_modified && &modified
 3816              0.020886     call add(mode, 'modified')
 5053              0.006073   endif
                            
 5053              0.015446   if g:airline_detect_paste && &paste
                                call add(mode, 'paste')
 5053              0.004105   endif
                            
 5053              0.062201   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(mode, 'crypt')
 5053              0.004140   endif
                            
 5053              0.016127   if g:airline_detect_spell && &spell
                                call add(mode, 'spell')
 5053              0.003792   endif
                            
 5053              0.013792   if &readonly || ! &modifiable
  102              0.000403     call add(mode, 'readonly')
 5053              0.003584   endif
                            
 5053              0.034258   let mode_string = join(mode)
 5053              0.030055   if get(w:, 'airline_lastmode', '') != mode_string
  147   0.114511   0.003688     call airline#highlighter#highlight_modified_inactive(context.bufnr)
  147  34.353821   0.005684     call airline#highlighter#highlight(mode, string(context.bufnr))
  147   0.019221   0.005947     call airline#util#doautocmd('AirlineModeChanged')
  147              0.000455     let w:airline_lastmode = mode_string
 5053              0.004343   endif
                            
 5053              0.008013   return ''

FUNCTION  <SNR>87_check_mixed_indent_file()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:34
Called 62 times
Total time:   0.006545
 Self time:   0.006545

count  total (s)   self (s)
   62              0.001036   let c_like_langs = get(g:, 'airline#extensions#c_like_langs', [ 'arduino', 'c', 'cpp', 'cuda', 'go', 'javascript', 'ld', 'php' ])
   62              0.000644   if index(c_like_langs, &ft) > -1
                                " for C-like languages: allow /** */ comment style with one space before the '*'
   60              0.000184     let head_spc = '\v(^ +\*@!)'
    2              0.000002   else
    2              0.000003     let head_spc = '\v(^ +)'
   62              0.000069   endif
   62              0.001115   let indent_tabs = search('\v(^\t+)', 'nw')
   62              0.002197   let indent_spc  = search(head_spc, 'nw')
   62              0.000287   if indent_tabs > 0 && indent_spc > 0
   36              0.000396     return printf("%d:%d", indent_tabs, indent_spc)
   26              0.000018   else
   26              0.000042     return ''
                              endif

FUNCTION  airline#util#append()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:49
Called 29393 times
Total time:   0.563052
 Self time:   0.563052

count  total (s)   self (s)
29393              0.152170   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
29393              0.024920   endif
29393              0.150274   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
29393              0.156095   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  coc#util#get_format_opts()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:866
Called 37 times
Total time:   0.001314
 Self time:   0.001314

count  total (s)   self (s)
   37              0.000384   if a:bufnr && bufloaded(a:bufnr)
   37              0.000272     let tabsize = getbufvar(a:bufnr, '&shiftwidth')
   37              0.000112     if tabsize == 0
                                  let tabsize = getbufvar(a:bufnr, '&tabstop')
   37              0.000042     endif
   37              0.000318     return [tabsize, getbufvar(a:bufnr, '&expandtab')]
                              endif
                              let tabsize = &shiftwidth == 0 ? &tabstop : &shiftwidth
                              return [tabsize, &expandtab]

FUNCTION  <SNR>76_HighlightArrayWhitespaceError()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:27
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_array_whitespace_error', 0)

FUNCTION  <SNR>76_HighlightBuildConstraints()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:71
Called 2 times
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    2              0.000006   return get(g:, 'go_highlight_build_constraints', 0)

FUNCTION  coc#float#create_buf()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:1277
Called 276 times
Total time:   0.053254
 Self time:   0.052781

count  total (s)   self (s)
  276              0.001142   if a:bufnr > 0 && bufloaded(a:bufnr)
  138              0.000295     let bufnr = a:bufnr
  138              0.000089   else
  138              0.000178     if s:is_vim
                                  noa let bufnr = bufadd('')
                                  noa call bufload(bufnr)
                                  call setbufvar(bufnr, '&buflisted', 0)
  138              0.000097     else
  138              0.017545       noa let bufnr = nvim_create_buf(v:false, v:true)
  138              0.000221     endif
  138              0.000674     let bufhidden = get(a:, 2, 'wipe')
  138   0.001734   0.001498     call setbufvar(bufnr, '&buftype', 'nofile')
  138   0.001077   0.001015     call setbufvar(bufnr, '&bufhidden', bufhidden)
  138   0.001058   0.000988     call setbufvar(bufnr, '&swapfile', 0)
  138   0.001143   0.001088     call setbufvar(bufnr, '&undolevels', -1)
                                " neovim's bug
  138   0.000911   0.000861     call setbufvar(bufnr, '&modifiable', 1)
  276              0.000208   endif
  276              0.001135   let lines = get(a:, 1, v:null)
  276              0.000874   if type(lines) != 7
  276              0.000920     if has('nvim')
  276              0.012020       call nvim_buf_set_lines(bufnr, 0, -1, v:false, lines)
                                else
                                  silent call deletebufline(bufnr, 1, '$')
                                  silent call setbufline(bufnr, 1, lines)
  276              0.000182     endif
  276              0.000170   endif
  276              0.000427   return bufnr

FUNCTION  airline#themes#get_highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/themes.vim:35
Called 91260 times
Total time:  15.943115
 Self time:   1.110202

count  total (s)   self (s)
91260  15.903870   1.070957     return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  coc#highlight#create_namespace()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:505
Called 204 times
Total time:   0.001600
 Self time:   0.001600

count  total (s)   self (s)
  204              0.000626   if type(a:key) == 0
  138              0.000176     return a:key
   66              0.000054   endif
   66              0.000258   if has_key(s:namespace_map, a:key)
   66              0.000181     return s:namespace_map[a:key]
                              endif
                              if has('nvim')
                                let s:namespace_map[a:key] = nvim_create_namespace('coc-'.a:key)
                              else
                                let s:namespace_map[a:key] = s:ns_id
                                let s:ns_id = s:ns_id + 1
                              endif
                              return s:namespace_map[a:key]

FUNCTION  <SNR>95_add_section()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/default.vim:47
Called 2901 times
Total time:   0.316345
 Self time:   0.111616

count  total (s)   self (s)
 2901              0.017611     let condition = (a:key is# "warning" || a:key is# "error") && (v:version == 704 && !has("patch1511"))
                                " i have no idea why the warning section needs special treatment, but it's
                                " needed to prevent separators from showing up
 2901   0.034971   0.017294     if ((a:key == 'error' || a:key == 'warning') && empty(s:get_section(a:context.winnr, a:key)))
                                  return
 2901              0.001632     endif
 2901              0.003248     if condition
                                  call a:builder.add_raw('%(')
 2901              0.001578     endif
 2901   0.230057   0.043004     call a:builder.add_section('airline_'.a:key, s:get_section(a:context.winnr, a:key))
 2901              0.003634     if condition
                                  call a:builder.add_raw('%)')
 2901              0.001628     endif

FUNCTION  coc#_insert_key()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:43
Called 160 times
Total time:   0.022568
 Self time:   0.010070

count  total (s)   self (s)
  160              0.003355   if get(a:, 1, 1)
  160   0.015885   0.003387     call coc#_cancel()
  160              0.000229   endif
  160              0.002299   return "\<c-r>=coc#rpc#".a:method."('doKeymap', ['".a:key."'])\<CR>"

FUNCTION  <SNR>76_HighlightFields()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:63
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_fields', 0)

FUNCTION  coc#window#tabnr()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/window.vim:1
Called 317 times
Total time:   0.018638
 Self time:   0.018638

count  total (s)   self (s)
  317              0.011975   if exists('*win_execute')
  317              0.001034     let ref = {}
  317              0.003663     call win_execute(a:winid, 'let ref["out"] = tabpagenr()')
  317              0.001282     return get(ref, 'out', -1)
                              elseif has('nvim')
                                let info = getwininfo(a:winid)
                                return empty(info) ? -1 : info[0]['tabnr']
                              else
                                throw 'win_execute() not exists, please upgrade your vim.'
                              endif

FUNCTION  <SNR>21_LoadIndent()
    Defined: /usr/local/share/nvim/runtime/indent.vim:13
Called 10 times
Total time:   0.001879
 Self time:   0.001701

count  total (s)   self (s)
   10              0.000041     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
   10              0.000018     endif
   10              0.000040     let s = expand("<amatch>")
   10              0.000028     if s != ""
   10              0.000019       if exists("b:did_indent")
                            	unlet b:did_indent
   10              0.000008       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
   20              0.000075       for name in split(s, '\.')
   10   0.000928   0.000750         exe 'runtime! indent/' . name . '.vim'
   10              0.000566         exe 'runtime! indent/' . name . '.lua'
   20              0.000016       endfor
   10              0.000007     endif

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:10
Called 4186 times
Total time:   0.233493
 Self time:   0.064330

count  total (s)   self (s)
 4186   0.230028   0.060865   return airline#extensions#coc#get('warning')

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:38
Called 4962 times
Total time:   0.339199
 Self time:   0.096217

count  total (s)   self (s)
                              " Shorten text for windows < 91 characters
 4962   0.331290   0.088308   return airline#util#shorten(get(g:, 'coc_status', ''), 91, 9)

FUNCTION  <SNR>84_coc_git_enabled()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:18
Called 4186 times
Total time:   0.055978
 Self time:   0.055978

count  total (s)   self (s)
 4186              0.034432   if !exists("*CocAction") || !get(g:, 'airline#extensions#hunks#coc_git', 0)
                                 " coc-git extension is disabled by default
                                 " unless specifically being enabled by the user
                                 " (as requested from coc maintainer)
 4186              0.007068     return 0
                              endif
                              return 1

FUNCTION  <SNR>48_try_cmd()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:37
Called 5 times
Total time:   0.019950
 Self time:   0.000525

count  total (s)   self (s)
    5   0.019769   0.000343   let out = systemlist(a:cmd, (a:0 ? a:1 : ['']), 1)
    5              0.000044   if v:shell_error
                                if !exists('s:did_error_try_cmd')
                                  echohl WarningMsg
                                  echomsg "clipboard: error: ".(len(out) ? out[0] : v:shell_error)
                                  echohl None
                                  let s:did_error_try_cmd = 1
                                endif
                                return 0
    5              0.000004   endif
    5              0.000027   return out

FUNCTION  coc#refresh()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:34
Called 4 times
Total time:   0.000094
 Self time:   0.000094

count  total (s)   self (s)
    4              0.000083   return "\<c-r>=coc#start()\<CR>"

FUNCTION  airline#extensions#searchcount#status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim:27
Called 1817 times
Total time:   0.160037
 Self time:   0.154364

count  total (s)   self (s)
 1817              0.003473   try
 1817              0.048828     let result = searchcount(#{recompute: 1, maxcount: -1})
 1817              0.016670     if empty(result) || result.total ==# 0
 1762              0.003759       return ''
   55              0.000061     endif
   55              0.000190     if result.incomplete ==# 1     " timed out
                                  return printf('%s [?/??]', s:search_term())
   55              0.000321     elseif result.incomplete ==# 2 " max count exceeded
                                  if result.total > result.maxcount &&  result.current > result.maxcount
                                    return printf('%s[>%d/>%d]', s:search_term(),		    result.current, result.total)
                                  elseif result.total > result.maxcount
                                    return printf('%s[%d/>%d]', s:search_term(),		    result.current, result.total)
                                  endif
   55              0.000055     endif
   55   0.007080   0.001407     return printf('%s[%d/%d]', s:search_term(),		result.current, result.total)
                              catch
                                return ''
 1817              0.003128   endtry

FUNCTION  coc#float#check_related()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:865
Called 131 times
Total time:   0.058226
 Self time:   0.012579

count  total (s)   self (s)
  131              0.000934   let invalids = []
  131   0.048954   0.003307   let ids = coc#float#get_float_win_list(1)
  155              0.000484   for id in ids
   24              0.000228     let target = getwinvar(id, 'target_winid', 0)
   24              0.000350     if (target && index(ids, target) == -1) || getwinvar(id, 'kind', '') == 'pum'
                                  call add(invalids, id)
   24              0.000029     endif
  155              0.000260   endfor
  131              0.000503   if !s:popup_list_api
  131              0.001580     let s:popup_list = filter(ids, "index(invalids, v:val) == -1")
  131              0.000180   endif
  131              0.000430   for id in invalids
                                call coc#float#close(id)
  131              0.000172   endfor

FUNCTION  coc#util#cursor()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:27
Called 27 times
Total time:   0.000909
 Self time:   0.000909

count  total (s)   self (s)
   27              0.000828   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]

FUNCTION  airline#util#stl_disabled()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:189
Called 939 times
Total time:   0.044557
 Self time:   0.032077

count  total (s)   self (s)
                              " setting the statusline is disabled,
                              " either globally, per window, or per buffer
                              " w:airline_disabled is deprecated!
  939   0.042495   0.030014   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline#util#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)

FUNCTION  <SNR>94_section_is_empty()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:182
Called 4602 times
Total time:   0.041811
 Self time:   0.041811

count  total (s)   self (s)
 4602              0.008133   let start=1
                            
                              " do not check for inactive windows or the tabline
 4602              0.009361   if a:self._context.active == 0
 3315              0.003373     return 0
 1287              0.003808   elseif get(a:self._context, 'tabline', 0)
                                return 0
 1287              0.000698   endif
                            
                              " only check, if airline#skip_empty_sections == 1
 1287              0.003751   if get(g:, 'airline_skip_empty_sections', 0) == 0
 1287              0.001121     return 0
                              endif
                            
                              " only check, if airline#skip_empty_sections == 1
                              if get(w:, 'airline_skip_empty_sections', -1) == 0
                                return 0
                              endif
                              " assume accents sections to be never empty
                              " (avoides, that on startup the mode message becomes empty)
                              if match(a:content, '%#__accent_[^#]*#.*__restore__#') > -1
                                return 0
                              endif
                              if empty(a:content)
                                return 1
                              endif
                              let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              if empty(list)
                                return 0 " no function in statusline text
                              endif
                              while len(list) > 0
                                let expr = list[0]
                                try
                                  " catch all exceptions, just in case
                                  if !empty(eval(expr))
                                    return 0
                                  endif
                                catch
                                  return 0
                                endtry
                                let start += 1
                                let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              endw
                              return 1

FUNCTION  coc#float#create_float_win()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:61
Called 138 times
Total time:   0.448654
 Self time:   0.060030

count  total (s)   self (s)
  138              0.000583   let lines = get(a:config, 'lines', v:null)
  138   0.018788   0.001589   let bufnr = coc#float#create_buf(a:bufnr, lines, 'hide')
                              " use exists
  138   0.001045   0.000537   if a:winid && coc#float#valid(a:winid)
   20              0.000051     if s:is_vim
                                  let [line, col] = s:popup_position(a:config)
                                  let opts = { 'firstline': 1, 'line': line, 'col': col, 'minwidth': a:config['width'], 'minheight': a:config['height'], 'maxwidth': a:config['width'], 'maxheight': a:config['height'], 'cursorline': get(a:config, 'cursorline', 0), 'title': get(a:config, 'title', ''), }
                                  if !s:empty_border(get(a:config, 'border', []))
                                    let opts['border'] = a:config['border']
                                  endif
                                  call popup_setoptions(a:winid, opts)
                                  call coc#float#vim_buttons(a:winid, a:config)
                                  call s:add_highlights(a:winid, a:config, 0)
                                  return [a:winid, winbufnr(a:winid)]
   20              0.000014     else
   20   0.003890   0.000233       let config = s:convert_config_nvim(a:config)
   20              0.000682       call nvim_win_set_buf(a:winid, bufnr)
   20              0.000405       call nvim_win_set_config(a:winid, config)
   20              0.000425       call nvim_win_set_cursor(a:winid, [1, 0])
   20   0.041353   0.000316       call coc#float#nvim_create_related(a:winid, config, a:config)
   20   0.020254   0.000289       call s:add_highlights(a:winid, a:config, 0)
   20              0.000053       return [a:winid, bufnr]
                                endif
  118              0.000078   endif
  118              0.000235   let winid = 0
  118              0.000136   if s:is_vim
                                let [line, col] = s:popup_position(a:config)
                                let title = get(a:config, 'title', '')
                                let buttons = get(a:config, 'buttons', [])
                                let hlgroup = get(a:config, 'highlight',  'CocFloating')
                                let opts = { 'title': title, 'line': line, 'col': col, 'fixed': 1, 'padding': empty(title) ?  [0, 1, 0, 1] : [0, 0, 0, 0], 'borderchars': s:borderchars, 'highlight': hlgroup, 'cursorline': get(a:config, 'cursorline', 0), 'minwidth': a:config['width'], 'minheight': a:config['height'], 'maxwidth': a:config['width'], 'maxheight': a:config['height'] }
                                if get(a:config, 'close', 0)
                                  let opts['close'] = 'button'
                                endif
                                if !empty(get(a:config, 'borderhighlight', v:null))
                                  let borderhighlight = a:config['borderhighlight']
                                  let opts['borderhighlight'] = type(borderhighlight) == 3 ? map(borderhighlight, 'coc#highlight#compose_hlgroup(v:val,"'.hlgroup.'")') : [coc#highlight#compose_hlgroup(borderhighlight, hlgroup)]
                                endif
                                if !s:empty_border(get(a:config, 'border', []))
                                  let opts['border'] = a:config['border']
                                endif
                                let winid = popup_create(bufnr, opts)
                                if !s:popup_list_api
                                  call add(s:popup_list, winid)
                                endif
                                if winid == 0
                                  return []
                                endif
                                call coc#float#vim_buttons(winid, a:config)
                                if has("patch-8.1.2281")
                                  call setwinvar(winid, '&showbreak', 'NONE')
                                endif
  118              0.000085   else
  118   0.021805   0.001816     let config = s:convert_config_nvim(a:config)
  118              0.000399     let border = get(a:config, 'border', [])
  118              0.001273     if has('nvim-0.5.0') && get(a:config, 'shadow', 0) && empty(get(a:config, 'buttons', v:null)) && empty(get(border, 2, 0))
                                  let config['border'] = 'shadow'
  118              0.000070     endif
  118              0.010502     noa let winid = nvim_open_win(bufnr, 0, config)
  118              0.000366     if winid == 0
                                  return []
  118              0.000089     endif
  118              0.000578     let hlgroup = get(a:config, 'highlight', 'CocFloating')
  118              0.001810     call setwinvar(winid, '&winhl', 'Normal:'.hlgroup.',NormalNC:'.hlgroup.',FoldColumn:'.hlgroup)
  118              0.000784     call setwinvar(winid, '&signcolumn', 'no')
  118              0.000743     call setwinvar(winid, '&foldenable', 0)
                                " cursorline highlight not work on old neovim
  118              0.000580     call setwinvar(winid, '&cursorline', 0)
  118              0.000635     call setwinvar(winid, 'border', get(a:config, 'border', []))
  118              0.000304     if get(a:config, 'winblend', 0)
                                  call setwinvar(winid, '&winblend', a:config['winblend'])
  118              0.000087     endif
                                " no left border
  118   0.002153   0.001629     if s:empty_border(get(a:config, 'border', [])) || a:config['border'][3] == 0
  118              0.000689       call setwinvar(winid, '&foldcolumn', 1)
                                else
                                  call setwinvar(winid, '&foldcolumn', 0)
  118              0.000094     endif
  118              0.003566     call nvim_win_set_cursor(winid, [1, 0])
  118   0.074596   0.001817     call coc#float#nvim_create_related(winid, config, a:config)
  118              0.000146   endif
  118              0.000383   if get(a:config, 'autohide', 0)
   16              0.000070     call setwinvar(winid, 'autohide', 1)
  118              0.000075   endif
  118              0.000478   if s:is_vim || has('nvim-0.5.0')
  118              0.000743     call setwinvar(winid, '&scrolloff', 0)
  118              0.000070   endif
  118              0.000374   call setwinvar(winid, 'float', 1)
  118              0.000457   call setwinvar(winid, '&list', 0)
  118              0.000399   call setwinvar(winid, '&number', 0)
  118              0.000407   call setwinvar(winid, '&relativenumber', 0)
  118              0.000597   call setwinvar(winid, '&cursorcolumn', 0)
  118              0.000531   call setwinvar(winid, '&colorcolumn', 0)
  118              0.000440   call setwinvar(winid, '&wrap', 1)
  118              0.000385   call setwinvar(winid, '&linebreak', 1)
  118              0.000510   call setwinvar(winid, '&conceallevel', 0)
  118   0.213485   0.001682   call s:add_highlights(winid, a:config, 0)
  118              0.000606   let g:coc_last_float_win = winid
  118   0.002501   0.001340   call coc#util#do_autocmd('CocOpenFloat')
  118              0.000353   return [winid, bufnr]

FUNCTION  airline#parts#filetype()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:102
Called 4962 times
Total time:   0.173147
 Self time:   0.098750

count  total (s)   self (s)
 4962   0.168635   0.094238   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  airline#extensions#netrw#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim:11
Called 144 times
Total time:   0.003569
 Self time:   0.003569

count  total (s)   self (s)
  144              0.000773   if &ft == 'netrw'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.'netrw'.spc)
                                if exists('*airline#extensions#branch#get_head')
                                  call a:1.add_section('airline_b', spc.'%{airline#extensions#branch#get_head()}'.spc)
                                endif
                                call a:1.add_section('airline_c', spc.'%f'.spc)
                                call a:1.split()
                                call a:1.add_section('airline_y', spc.'%{airline#extensions#netrw#sortstring()}'.spc)
                                return 1
  144              0.000081   endif

FUNCTION  airline#parts#iminsert()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:82
Called 4186 times
Total time:   0.056608
 Self time:   0.056608

count  total (s)   self (s)
 4186              0.024928   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
 4186              0.004768   endif
 4186              0.006184   return ''

FUNCTION  airline#extensions#term#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/term.vim:14
Called 144 times
Total time:   0.003905
 Self time:   0.003631

count  total (s)   self (s)
  144              0.000876   if &buftype ==? 'terminal' || bufname(a:2.bufnr)[0] ==? '!'
    3   0.000066   0.000018     call a:1.add_section_spaced('airline_a', s:section_a)
    3   0.000092   0.000030     call a:1.add_section_spaced('airline_b', s:neoterm_id(a:2.bufnr))
    3   0.000137   0.000031     call a:1.add_section('airline_term', s:spc.s:termname(a:2.bufnr))
    3   0.000022   0.000012     call a:1.split()
    3   0.000021   0.000012     call a:1.add_section('airline_y', '')
    3   0.000050   0.000013     call a:1.add_section_spaced('airline_z', s:section_z)
    3              0.000003     return 1
  141              0.000086   endif

FUNCTION  <SNR>76_HighlightTrailingWhitespaceError()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:43
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_trailing_whitespace_error', 0)

FUNCTION  <SNR>25_SyncAutocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:252
Called 8 times
Total time:   0.036145
 Self time:   0.000184

count  total (s)   self (s)
    8              0.000048   if !g:coc_service_initialized
                                return
    8              0.000005   endif
    8   0.036070   0.000109   call coc#rpc#request('CocAutocmd', a:000)

FUNCTION  <SNR>84_get_hunks_empty()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:72
Called 4186 times
Total time:   0.011761
 Self time:   0.011761

count  total (s)   self (s)
 4186              0.008226   return ''

FUNCTION  coc#compat#execute()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/compat.vim:166
Called 264 times
Total time:   0.185613
 Self time:   0.036351

count  total (s)   self (s)
  264              0.000830   if exists('*win_execute')
  264              0.000820     if type(a:command) == v:t_string
  138              0.007339       keepalt call win_execute(a:winid, a:command, get(a:, 1, ''))
  126              0.000460     elseif type(a:command) == v:t_list
  126   0.163623   0.014361       keepalt call win_execute(a:winid, join(a:command, "\n"), get(a:, 1, ''))
  264              0.000210     endif
                              elseif has('nvim')
                                if !nvim_win_is_valid(a:winid)
                                  return
                                endif
                                let curr = nvim_get_current_win()
                                noa keepalt call nvim_set_current_win(a:winid)
                                if type(a:command) == v:t_string
                                  exe get(a:, 1, '').' '.a:command
                                elseif type(a:command) == v:t_list
                                  for cmd in a:command
                                    exe get(a:, 1, '').' '.cmd
                                  endfor
                                endif
                                noa keepalt call nvim_set_current_win(curr)
                              else
                                throw 'win_execute not exists, please upgrade vim.'
  264              0.000172   endif

FUNCTION  coc#rpc#request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:89
Called 176 times
Total time:   1.356113
 Self time:   0.009444

count  total (s)   self (s)
  176   0.007380   0.003416   if !coc#rpc#ready()
                                return ''
  176              0.000188   endif
  176   1.347460   0.004754   return s:client['request'](a:method, a:args)

FUNCTION  coc#float#get_related()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:1267
Called 814 times
Total time:   0.021444
 Self time:   0.021444

count  total (s)   self (s)
 1090              0.008834   for winid in getwinvar(a:winid, 'related', [])
  296              0.001151     if getwinvar(winid, 'kind', '') ==# a:kind
   20              0.000023       return winid
  276              0.000160     endif
 1070              0.001680   endfor
  794              0.001791   return 0

FUNCTION  coc#_hide()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:94
Called 82 times
Total time:   0.001122
 Self time:   0.001122

count  total (s)   self (s)
   82              0.000780   if !pumvisible() | return | endif
   18              0.000186   call feedkeys("\<C-e>", 'in')

FUNCTION  airline#extensions#coc#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:18
Called 8372 times
Total time:   0.374395
 Self time:   0.374395

count  total (s)   self (s)
 8372              0.052800   if !exists(':CocCommand')
                                return ''
 8372              0.007274   endif
 8372              0.046062   let _backup = get(g:, 'coc_stl_format', '')
 8372              0.033852   let is_err = (a:type  is# 'error')
 8372              0.042466   let info = get(b:, 'coc_diagnostic_info', {})
 8372              0.043307   if empty(info) | return '' | endif
                            
                            
 6792              0.030100   let cnt = get(info, a:type, 0)
                            
 6792              0.016930   if empty(cnt)
 4163              0.005142     return ''
 2629              0.002235   else
 2629              0.026023     let lnum = printf('(L%d)', (info.lnums)[is_err ? 0 : 1])
 2629              0.017692     return (is_err ? s:error_symbol : s:warning_symbol).cnt.lnum
                              endif

FUNCTION  coc#util#set_lines()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:553
Called 18 times
Total time:   0.003218
 Self time:   0.001360

count  total (s)   self (s)
   18              0.000198   if !bufloaded(a:bufnr)
                                return
   18              0.000014   endif
   18              0.000132   if getbufvar(a:bufnr, 'changedtick') != a:changedtick && bufnr('%') == a:bufnr
                                " try apply current line change
                                let lnum = line('.')
                                let idx = a:start - lnum + 1
                                let previous = get(a:original, idx, 0)
                                if type(previous) == 1
                                  let content = getline('.')
                                  if previous !=# content
                                    let diff = coc#helper#str_diff(content, previous, col('.'))
                                    let changed = get(a:replacement, idx, 0)
                                    if type(changed) == 1 && strcharpart(previous, 0, diff['end']) ==# strcharpart(changed, 0, diff['end'])
                                      let applied = coc#helper#str_apply(changed, diff)
                                      let replacement = copy(a:replacement)
                                      let replacement[idx] = applied
                                      call coc#compat#buf_set_lines(a:bufnr, a:start, a:end, replacement)
                                      return
                                    endif
                                  endif
                                endif
   18              0.000010   endif
   18   0.002149   0.000292   call coc#compat#buf_set_lines(a:bufnr, a:start, a:end, a:replacement)

FUNCTION  airline#extensions#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:71
Called 732 times
Total time:   0.098017
 Self time:   0.055111

count  total (s)   self (s)
  732              0.004278   let filetype_overrides = get(s:, 'filetype_overrides', {})
  732              0.005216   call extend(filetype_overrides, get(g:, 'airline_filetype_overrides', {}), 'force')
                            
  732   0.049378   0.006472   if s:is_excluded_window()
                                return -1
  732              0.000431   endif
                            
  732              0.001490   if &buftype == 'terminal'
    6              0.000012     let w:airline_section_x = ''
    6              0.000009     let w:airline_section_y = ''
  732              0.000359   endif
                            
  732              0.002668   if &previewwindow && empty(get(w:, 'airline_section_a', ''))
                                let w:airline_section_a = 'Preview'
                                let w:airline_section_b = ''
                                let w:airline_section_c = bufname(winbufnr(winnr()))
  732              0.000588   endif
                            
  732              0.006057   if has_key(filetype_overrides, &ft) && ((&filetype == 'help' && &buftype == 'help') || &filetype !~ 'help')
                                " for help files only override it, if the buftype is also of type 'help',
                                " else it would trigger when editing Vim help files
                                let args = filetype_overrides[&ft]
                                call airline#extensions#apply_left_override(args[0], args[1])
  732              0.000407   endif
                            
  732              0.001255   if &buftype == 'help'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
                                let w:airline_render_right = 1
  732              0.000341   endif
                            
  732              0.003145   for item in items(s:filetype_regex_overrides)
                                if match(&ft, item[0]) >= 0
                                  call airline#extensions#apply_left_override(item[1][0], item[1][1])
                                endif
  732              0.000584   endfor

FUNCTION  coc#float#get_config_cursor()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:884
Called 40 times
Total time:   0.018044
 Self time:   0.010699

count  total (s)   self (s)
   40              0.000189   let preferTop = get(a:config, 'preferTop', 0)
   40              0.000129   let title = get(a:config, 'title', '')
   40              0.000195   let border = get(a:config, 'border', [0, 0, 0, 0])
   40   0.001027   0.000469   if s:empty_border(border) && len(title)
                                let border = [1, 1, 1, 1]
   40              0.000025   endif
   40              0.000239   let bh = get(border, 0, 0) + get(border, 2, 0)
   40              0.000175   let vh = &lines - &cmdheight - 1
   40              0.000073   if vh <= 0
                                return v:null
   40              0.000023   endif
   40   0.001884   0.000559   let maxWidth = coc#helper#min(get(a:config, 'maxWidth', &columns - 1), &columns - 1)
   40              0.000068   if maxWidth < 3
                                return v:null
   40              0.000024   endif
   40   0.001486   0.000639   let maxHeight = coc#helper#min(get(a:config, 'maxHeight', vh), vh)
   40              0.000079   let ch = 0
   40   0.001477   0.000573   let width = coc#helper#min(40, strdisplaywidth(title)) + 3
  193              0.000238   for line in a:lines
  153              0.000771     let dw = max([1, strdisplaywidth(line)])
  153              0.000469     let width = max([width, dw + 2])
  153              0.001121     let ch += float2nr(ceil(str2float(string(dw))/(maxWidth - 2)))
  193              0.000150   endfor
   40   0.001571   0.000427   let width = coc#helper#min(maxWidth, width)
   40   0.001197   0.000523   let [lineIdx, colIdx] = coc#cursor#screen_pos()
                              " How much we should move left
   40   0.001303   0.000469   let offsetX = coc#helper#min(get(a:config, 'offsetX', 0), colIdx)
   40              0.000100   let showTop = 0
   40              0.000101   let hb = vh - lineIdx -1
   40              0.000211   if lineIdx > bh + 2 && (preferTop || (lineIdx > hb && hb < ch + bh))
    9              0.000012     let showTop = 1
   40              0.000040   endif
   40   0.001587   0.000527   let height = coc#helper#min(maxHeight, ch + bh, showTop ? lineIdx - 1 : hb)
   40              0.000073   if height <= bh
                                return v:null
   40              0.000028   endif
   40              0.000280   let col = - max([offsetX, colIdx - (&columns - 1 - width)])
   40              0.000111   let row = showTop ? - height + bh : 1
   40              0.000325   return { 'row': row, 'col': col, 'width': width - 2, 'height': height - bh }

FUNCTION  coc#cursor#position()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/cursor.vim:16
Called 554 times
Total time:   0.012653
 Self time:   0.012653

count  total (s)   self (s)
  554              0.011787   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]

FUNCTION  <SNR>83_GetHiCmd()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:140
Called 1336 times
Total time:   0.172651
 Self time:   0.172651

count  total (s)   self (s)
                                " a:list needs to have 5 items!
 1336              0.002719     let res = ''
 1336              0.002273     let i = -1
 8016              0.010009     while i < 4
 6680              0.009489       let i += 1
 6680              0.019958       let item = get(a:list, i, '')
 6680              0.009890       if item is ''
 1305              0.001352         continue
 5375              0.002804       endif
 5375              0.006098       if i == 0
 1336              0.004602         let res .= ' guifg='.item
 4039              0.004194       elseif i == 1
 1231              0.002906         let res .= ' guibg='.item
 2808              0.002484       elseif i == 2
 1336              0.003345         let res .= ' ctermfg='.item
 1472              0.001243       elseif i == 3
 1231              0.002697         let res .= ' ctermbg='.item
  241              0.000242       elseif i == 4
  241              0.001290         let res .= printf(' gui=%s cterm=%s term=%s', item, item, item)
 5375              0.002759       endif
 6711              0.005516     endwhile
 1336              0.002086     return res

FUNCTION  coc#_do_complete()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:65
Called 253 times
Total time:   0.017631
 Self time:   0.017631

count  total (s)   self (s)
  253              0.008866   let g:coc#_context = { 'start': a:start, 'candidates': a:items, 'preselect': a:preselect}
  253              0.004010   if mode() =~# 'i' && &paste != 1
  253              0.003438     call feedkeys("\<Plug>CocRefresh", 'i')
  253              0.000340   endif

FUNCTION  <SNR>96_is_blocking()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:1710
Called 40 times
Total time:   0.000751
 Self time:   0.000626

count  total (s)   self (s)
   40   0.000512   0.000387   if coc#prompt#activated()
                                return 1
   40              0.000029   endif
   40              0.000046   return 0

FUNCTION  airline#util#winwidth()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:19
Called 33180 times
Total time:   0.543470
 Self time:   0.543470

count  total (s)   self (s)
33180              0.177092   let nr = get(a:000, 0, 0)
33180              0.130560   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
33180              0.029563   else
33180              0.102455     return winwidth(nr)
                              endif

FUNCTION  airline#util#doautocmd()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:176
Called 147 times
Total time:   0.013274
 Self time:   0.004474

count  total (s)   self (s)
  147              0.000875   if !exists('#airline') && a:event !=? 'AirlineToggledOff'
                                " airline disabled
                                return
  147              0.000113   endif
  147   0.011707   0.002906   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  coc#util#get_complete_option()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:335
Called 117 times
Total time:   0.029085
 Self time:   0.029085

count  total (s)   self (s)
  117              0.001400   let pos = getcurpos()
  117              0.000931   let line = getline(pos[1])
  117              0.003174   let input = matchstr(strpart(line, 0, pos[2] - 1), '\k*$')
  117              0.000803   let col = pos[2] - strlen(input)
  117              0.011354   let synname = synIDattr(synID(pos[1], col, 1), 'name')
  117              0.010882   return { 'word': matchstr(strpart(line, col - 1), '^\k\+'), 'input': empty(input) ? '' : input, 'line': line, 'filetype': &filetype, 'filepath': expand('%:p'), 'bufnr': bufnr('%'), 'linenr': pos[1], 'colnr' : pos[2], 'col': col - 1, 'synname': synname, 'changedtick': b:changedtick, 'blacklist': get(b:, 'coc_suggest_blacklist', []),}

FUNCTION  nerdtree#checkForBrowse()
    Defined: ~/.vim/plugged/nerdtree/autoload/nerdtree.vim:61
Called 47 times
Total time:   0.000519
 Self time:   0.000519

count  total (s)   self (s)
   47              0.000372     if !isdirectory(a:dir)
   47              0.000049         return
                                endif
                            
                                if s:reuseWin(a:dir)
                                    return
                                endif
                            
                                call g:NERDTreeCreator.CreateWindowTree(a:dir)

FUNCTION  airline#builder#get_prev_group()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:37
Called 4602 times
Total time:   0.066739
 Self time:   0.066739

count  total (s)   self (s)
 4602              0.010604   let x = a:i - 1
 5397              0.007947   while x >= 0
 4602              0.013108     let group = a:sections[x][0]
 4602              0.011883     if group != '' && group != '|'
 3807              0.006198       return group
  795              0.000532     endif
  795              0.001124     let x = x - 1
 1590              0.001290   endwhile
  795              0.000806   return ''

FUNCTION  coc#float#create_cursor_float()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:523
Called 40 times
Total time:   0.661194
 Self time:   0.480526

count  total (s)   self (s)
   40              0.000255   if !s:float_supported
                                return v:null
   40              0.000064   endif
   40   0.001244   0.000493   if s:is_blocking()
                                return v:null
   40              0.000025   endif
   40              0.000273   let pumAlignTop = get(a:config, 'pumAlignTop', 0)
   40              0.000275   let modes = get(a:config, 'modes', ['n', 'i', 'ic', 's'])
   40              0.000130   let mode = mode()
   40              0.000144   let currbuf = bufnr('%')
   40              0.000178   let pos = [line('.'), col('.')]
   40              0.000173   if index(modes, mode) == -1
                                return v:null
   40              0.000026   endif
   40              0.000218   if has('nvim') && mode ==# 'i'
                                " helps to fix undo issue, don't know why.
    9              0.000067     call feedkeys("\<C-g>u", 'n')
   40              0.000028   endif
   40   0.018701   0.000657   let dimension = coc#float#get_config_cursor(a:lines, a:config)
   40              0.000098   if empty(dimension)
                                return v:null
   40              0.000026   endif
   40              0.000259   if pumvisible() && ((pumAlignTop && dimension['row'] <0)|| (!pumAlignTop && dimension['row'] > 0))
                                return v:null
   40              0.000023   endif
   40              0.000116   let width = dimension['width']
   40   0.002280   0.001529   let lines = map(a:lines, {_, s -> s =~# '^─' ? repeat('─', width) : s})
   40              0.000765   let config = extend(extend({'lines': lines, 'relative': 'cursor'}, a:config), dimension)
   40   0.013187   0.000574   call coc#float#close_auto_hide_wins(a:winid)
   40   0.128036   0.000779   let res = coc#float#create_float_win(a:winid, a:bufnr, config)
   40              0.000159   if empty(res)
                                return v:null
   40              0.000029   endif
   40              0.000161   let alignTop = dimension['row'] < 0
   40              0.000156   let winid = res[0]
   40              0.000081   let bufnr = res[1]
   40              0.470352   redraw
   40              0.000390   if has('nvim')
   40   0.022083   0.000833     call coc#float#nvim_scrollbar(winid)
   40              0.000041   endif
   40              0.000270   return [currbuf, pos, winid, bufnr, alignTop]

FUNCTION  airline#mode_changed()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:296
Called 147 times
Total time:   0.005264
 Self time:   0.004013

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
  147              0.002302   let g:airline#visual_active = (mode() =~? '[vs]')
  147   0.002617   0.001366   call airline#update_tabline()

FUNCTION  <SNR>96_convert_config_nvim()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:774
Called 138 times
Total time:   0.023647
 Self time:   0.009873

count  total (s)   self (s)
  138              0.001161   let valids = ['relative', 'win', 'anchor', 'width', 'height', 'bufpos', 'col', 'row', 'focusable', 'style']
  138   0.014628   0.001486   let result = coc#helper#dict_pick(a:config, valids)
  138              0.000505   let border = get(a:config, 'border', [])
  138   0.002132   0.001499   if !s:empty_border(border)
                                if result['relative'] ==# 'cursor' && result['row'] < 0
                                  " move top when has bottom border
                                  if get(border, 2, 0)
                                    let result['row'] = result['row'] - 1
                                  endif
                                else
                                  " move down when has top border
                                  if get(border, 0, 0) && !get(a:config, 'prompt', 0)
                                    let result['row'] = result['row'] + 1
                                  endif
                                endif
                                " move right when has left border
                                if get(border, 3, 0)
                                  let result['col'] = result['col'] + 1
                                endif
                                let result['width'] = float2nr(result['width'] + 1 - get(border,3, 0))
  138              0.000111   else
  138              0.000648     let result['width'] = float2nr(result['width'] + 1)
  138              0.000109   endif
  138              0.000443   let result['height'] = float2nr(result['height'])
  138              0.000339   return result

FUNCTION  coc#prompt#activated()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/prompt.vim:182
Called 40 times
Total time:   0.000125
 Self time:   0.000125

count  total (s)   self (s)
   40              0.000093   return s:activated

FUNCTION  <SNR>65_Remove_Matches()
    Defined: /usr/local/share/nvim/runtime/plugin/matchparen.vim:197
Called 1618 times
Total time:   0.030671
 Self time:   0.030671

count  total (s)   self (s)
 1618              0.012386   if exists('w:paren_hl_on') && w:paren_hl_on
  314              0.002453     silent! call matchdelete(3)
  314              0.000965     let w:paren_hl_on = 0
 1618              0.001891   endif

FUNCTION  airline#extensions#term#termmode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/term.vim:38
Called 91 times
Total time:   0.006092
 Self time:   0.001512

count  total (s)   self (s)
   91   0.005344   0.000765   let mode = airline#parts#mode()[0]
   91              0.000246   if mode ==? 'T' || mode ==? '-'
                                " We don't need to output T, the statusline already says "TERMINAL".
                                " Also we don't want to output "-" on an inactive statusline.
   84              0.000116     let mode = ''
   91              0.000056   endif
   91              0.000104   return mode

FUNCTION  274()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:8
Called 795 times
Total time:   0.006587
 Self time:   0.006587

count  total (s)   self (s)
  795              0.006234   call add(self._sections, ['|', a:0 ? a:1 : '%='])

FUNCTION  airline#extensions#default#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/default.vim:79
Called 732 times
Total time:   0.560917
 Self time:   0.064137

count  total (s)   self (s)
  732              0.002096   let winnr = a:context.winnr
  732              0.001643   let active = a:context.active
                            
  732   0.012090   0.008457   if airline#util#getwinvar(winnr, 'airline_render_left', active || (!active && !g:airline_inactive_collapse))
  141   0.052431   0.002309     call s:build_sections(a:builder, a:context, s:layout[0])
  591              0.000482   else
  591   0.069187   0.010954     let text = !empty(s:get_section(winnr, 'c')) ? s:get_section(winnr, 'c') : ' %f%m '
  591   0.008764   0.005324     call a:builder.add_section('airline_c'.(a:context.bufnr), text)
  732              0.000545   endif
                            
  732   0.050579   0.010766   call a:builder.split(s:get_section(winnr, 'gutter', '', ''))
                            
  732   0.008761   0.006030   if airline#util#getwinvar(winnr, 'airline_render_right', 1)
  732   0.346502   0.007693     call s:build_sections(a:builder, a:context, s:layout[1])
  732              0.000489   endif
                            
  732              0.000802   return 1

FUNCTION  <SNR>87_conflict_marker()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:52
Called 62 times
Total time:   0.008424
 Self time:   0.008424

count  total (s)   self (s)
                              " Checks for git conflict markers
   62              0.000240   let annotation = '\%([0-9A-Za-z_.:]\+\)\?'
   62              0.001049   if match(['rst', 'markdown'], &ft) >= 0
                                " rst filetypes use '=======' as header
    2              0.000008     let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(>\{7\} '.annotation.'\)\)$'
   60              0.000084   else
   60              0.000528     let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(=\{7\}\)\|\%(>\{7\} '.annotation.'\)\)$'
   62              0.000070   endif
   62              0.005869   return search(pattern, 'nw')

FUNCTION  coc#highlight#get()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:19
Called 23 times
Total time:   0.006446
 Self time:   0.006182

count  total (s)   self (s)
   23              0.000105   if !has('nvim-0.5.0') && !exists('*prop_list')
                                throw 'Get highlights requires neovim 0.5.0 or vim support prop_list()'
   23              0.000015   endif
   23              0.000274   if !has_key(s:namespace_map, a:key) || !bufloaded(a:bufnr)
                                return {}
   23              0.000014   endif
   23   0.000517   0.000254   let ns = coc#highlight#create_namespace(a:key)
   23              0.000052   let current = {}
   23              0.000073   if has('nvim-0.5.0')
   23              0.000125     let end = a:end == -1 ? [-1, -1] : [a:end - 1, 0]
   23              0.001127     let markers = nvim_buf_get_extmarks(a:bufnr, ns, [a:start, 0], end, {'details': v:true})
   66              0.000263     for [_, row, start_col, details] in markers
   43              0.000149       let delta = details['end_row'] - row
   43              0.000160       if delta > 1 || (delta == 1 && details['end_col'] != 0)
                                    " Don't known neovim's api for multiple lines markers.
                                    continue
   43              0.000029       endif
   43              0.000250       let lines = getbufline(a:bufnr, row + 1)
   43              0.000106       if empty(lines)
                                    " It's possible that markers exceeded last line.
                                    continue
   43              0.000057       endif
   43              0.000123       let text = lines[0]
   43              0.000271       let curr = get(current, string(row), [])
   43              0.000561       call add(curr, { 'hlGroup': details['hl_group'], 'lnum': row, 'colStart': start_col, 'colEnd': delta == 1 ? strlen(text) : details['end_col'] })
   43              0.000246       let current[string(row)] = curr
   66              0.000077     endfor
                              else
                                let id = s:prop_offset + ns
                                " we could only get textprops line by line
                                let end = a:end == -1 ? getbufinfo(a:bufnr)[0]['linecount'] : a:end
                                for line in range(a:start + 1, end)
                                  let items = []
                                  for prop in prop_list(line, {'bufnr': a:bufnr, 'id': id})
                                    " vim have support for cross line text props, but we're not using
                                    call add(items, { 'hlGroup': s:prop_type_hlgroup(prop['type']), 'lnum': line - 1, 'colStart': prop['col'] - 1, 'colEnd': prop['col'] - 1 + prop['length'] - (prop['end'] == 0 ? 1 : 0), })
                                  endfor
                                  if !empty(items)
                                    let current[string(line - 1)] = items
                                  endif
                                endfor
   23              0.000017   endif
   23              0.000053   return current

FUNCTION  airline#util#wrap()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:42
Called 49241 times
Total time:   0.596160
 Self time:   0.534572

count  total (s)   self (s)
49241   0.350413   0.288824   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
49241              0.039591   endif
49241              0.089277   return a:text

FUNCTION  <SNR>76_HighlightFormatStrings()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:79
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_format_strings', 1)

FUNCTION  <SNR>76_HighlightExtraTypes()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:35
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_extra_types', 0)

FUNCTION  airline#util#getwinvar()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:82
Called 8225 times
Total time:   0.035252
 Self time:   0.035252

count  total (s)   self (s)
 8225              0.031867     return getwinvar(a:winnr, a:key, a:def)

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:64
Called 4186 times
Total time:   1.505745
 Self time:   1.030156

count  total (s)   self (s)
 4186              0.031265   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
 4186              0.046773   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
   11              0.000012     return ''
 4175              0.003922   endif
 4175              0.062740   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
 4175              0.028917   if !exists('b:airline_whitespace_check')
   62              0.000341     let b:airline_whitespace_check = ''
   62              0.000891     let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
   62              0.000318     let trailing = 0
   62              0.000176     let check = 'trailing'
   62              0.001151     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
   62              0.000107       try
   62              0.000613         let regexp = get(b:, 'airline_whitespace_trailing_regexp', get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$'))
   62              0.089896         let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
   62              0.000122       endtry
   62              0.000071     endif
                            
   62              0.000177     let mixed = 0
   62              0.000164     let check = 'indent'
   62              0.001058     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
   62   0.243772   0.001374       let mixed = s:check_mixed_indent()
   62              0.000122     endif
                            
   62              0.000210     let mixed_file = ''
   62              0.000170     let check = 'mixed-indent-file'
   62              0.001179     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
   62   0.008098   0.001553       let mixed_file = s:check_mixed_indent_file()
   62              0.000079     endif
                            
   62              0.000156     let long = 0
   62              0.000351     if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
   62              0.000081     endif
                            
   62              0.000181     let conflicts = 0
   62              0.000386     if index(checks, 'conflicts') > -1
   62   0.009672   0.001248       let conflicts = s:conflict_marker()
   62              0.000096     endif
                            
   62              0.000608     if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
   38              0.000225       let b:airline_whitespace_check = s:symbol
   38              0.000181       if strlen(s:symbol) > 0
   38              0.000244         let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
   38              0.000050       endif
                            
   38              0.000099       if s:show_message
   38              0.000113         if trailing != 0
    2              0.000008           let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
    2              0.000012           let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
   38              0.000052         endif
   38              0.000099         if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
   38              0.000043         endif
   38              0.000087         if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
   38              0.000042         endif
   38              0.000170         if !empty(mixed_file)
   36              0.000408           let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
   36              0.000530           let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
   38              0.000049         endif
   38              0.000112         if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
   38              0.000044         endif
   38              0.000044       endif
   62              0.000058     endif
 4175              0.003860   endif
 4175   0.287484   0.069262   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  airline#extensions#po#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/po.vim:64
Called 141 times
Total time:   0.001541
 Self time:   0.001541

count  total (s)   self (s)
  141              0.000645   if &ft ==# 'po'
                                call airline#extensions#prepend_to_section('z', '%{airline#extensions#po#stats()}')
                                " Also reset the cache variable, if a window has been split, e.g. the winwidth changed
                                autocmd airline BufWritePost * call s:autocmd_handler()
                                autocmd airline WinEnter * call airline#extensions#po#on_winenter()
  141              0.000077   endif

FUNCTION  coc#cursor#move_to()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/cursor.vim:21
Called 25 times
Total time:   0.000736
 Self time:   0.000736

count  total (s)   self (s)
   25              0.000294   let content = getline(a:line + 1)
   25              0.000155   let pre = strcharpart(content, 0, a:character)
   25              0.000068   let col = strlen(pre) + 1
   25              0.000168   call cursor(a:line + 1, col)

FUNCTION  <SNR>94_get_transitioned_seperator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:140
Called 3012 times
Total time:   2.541052
 Self time:   0.142335

count  total (s)   self (s)
 3012              0.004970   let line = ''
 3012              0.018517   if get(a:self._context, 'tabline', 0) && get(g:, 'airline#extensions#tabline#alt_sep', 0) && a:group ==# 'airline_tabsel' && a:side
                                call airline#highlighter#add_separator(a:prev_group, a:group, 0)
                                let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
                                let line .=  a:self._context.right_sep.'%#'.a:group.'#'
 3012              0.002048   else
 3012   2.433119   0.034402     call airline#highlighter#add_separator(a:prev_group, a:group, a:side)
 3012              0.024706     let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
 3012              0.014397     let line .= a:side ? a:self._context.left_sep : a:self._context.right_sep
 3012              0.007872     let line .= '%#'.a:group.'#'
 3012              0.001887   endif
 3012              0.003886   return line

FUNCTION  coc#_cancel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:99
Called 164 times
Total time:   0.012568
 Self time:   0.006170

count  total (s)   self (s)
                              " hack for close pum
  164              0.000867   if pumvisible()
   18              0.001039     let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}
   18              0.000303     call feedkeys("\<Plug>CocRefresh", 'i')
   18   0.006891   0.000493     call coc#rpc#notify('stopCompletion', [])
  164              0.000323   endif

FUNCTION  <SNR>76_HighlightSpaceTabError()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:39
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_space_tab_error', 0)

FUNCTION  coc#on_enter()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:38
Called 11 times
Total time:   0.001863
 Self time:   0.000212

count  total (s)   self (s)
   11   0.001842   0.000191   call coc#rpc#notify('CocAutocmd', ['Enter', bufnr('%')])
   11              0.000009   return ''

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:76
Called 4186 times
Total time:   0.407220
 Self time:   0.339481

count  total (s)   self (s)
 4186              0.046272   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
 4186              0.022920     if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
 4186              0.021855     elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
 4186              0.015679     elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
 4186              0.022139     elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
 4186   0.117212   0.061234     elseif s:coc_git_enabled()
                                  let b:source_func = 's:get_hunks_coc'
 4186              0.004280     else
 4186              0.013201       let b:source_func = 's:get_hunks_empty'
 4186              0.004003     endif
 4186              0.003592   endif
 4186   0.079005   0.067244   return {b:source_func}()

FUNCTION  <SNR>25_Autocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:245
Called 3930 times
Total time:   1.114260
 Self time:   0.096871

count  total (s)   self (s)
 3930              0.018476   if !g:coc_service_initialized
                                return
 3930              0.004793   endif
 3930   1.074922   0.057533   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  coc#highlight#compose_hlgroup()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:324
Called 169 times
Total time:   0.001905
 Self time:   0.001905

count  total (s)   self (s)
  169              0.000849   let hlGroup = 'Fg'.a:fgGroup.'Bg'.a:bgGroup
  169              0.000381   if a:fgGroup ==# a:bgGroup
  138              0.000196     return a:fgGroup
   31              0.000022   endif
   31              0.000104   if hlexists(hlGroup)
   31              0.000052     return hlGroup
                              endif
                              let fgId = synIDtrans(hlID(a:fgGroup))
                              let bgId = synIDtrans(hlID(a:bgGroup))
                              let guifg = synIDattr(fgId, 'reverse', 'gui') !=# '1' ? synIDattr(fgId, 'fg', 'gui') : synIDattr(fgId, 'bg', 'gui')
                              let guibg = synIDattr(bgId, 'reverse', 'gui') !=# '1' ? synIDattr(bgId, 'bg', 'gui') : synIDattr(bgId, 'fg', 'gui')
                              let ctermfg = synIDattr(fgId, 'reverse', 'cterm') !=# '1' ? synIDattr(fgId, 'fg', 'cterm') : synIDattr(fgId, 'bg', 'cterm')
                              let ctermbg = synIDattr(bgId, 'reverse', 'cterm') !=# '1' ? synIDattr(bgId, 'bg', 'cterm') : synIDattr(bgId, 'fg', 'cterm')
                              let bold = synIDattr(fgId, 'bold') ==# '1'
                              let italic = synIDattr(fgId, 'italic') ==# '1'
                              let underline = synIDattr(fgId, 'underline') ==# '1'
                              let cmd = 'silent hi ' . hlGroup
                              if !empty(guifg)
                                let cmd .= ' guifg=' . guifg
                              endif
                              if !empty(ctermfg)
                                let cmd .= ' ctermfg=' . ctermfg
                              elseif guifg =~# '^#'
                                let cmd .= ' ctermfg=' . coc#color#rgb2term(strpart(guifg, 1))
                              endif
                              if !empty(guibg)
                                let cmd .= ' guibg=' . guibg
                              endif
                              if !empty(ctermbg)
                                let cmd .= ' ctermbg=' . ctermbg
                              elseif guibg =~# '^#'
                                let cmd .= ' ctermbg=' . coc#color#rgb2term(strpart(guibg, 1))
                              endif
                              if bold
                                let cmd .= ' cterm=bold gui=bold'
                              elseif italic
                                let cmd .= ' cterm=italic gui=italic'
                              elseif underline
                                let cmd .= ' cterm=underline gui=underline'
                              endif
                              execute cmd
                              return hlGroup

FUNCTION  airline#update_statusline_inactive()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:173
Called 144 times
Total time:   3.630363
 Self time:   0.049928

count  total (s)   self (s)
  144   0.008895   0.001944   if airline#util#stl_disabled(winnr())
                                return
  144              0.000091   endif
  795              0.001415   for nr in a:range
  651   0.045387   0.016251     if airline#util#stl_disabled(nr)
                                  continue
  651              0.000405     endif
  651              0.002736     call setwinvar(nr, 'airline_active', 0)
  651              0.004398     let context = { 'winnr': nr, 'active': 0, 'bufnr': winbufnr(nr) }
  651              0.001851     if get(g:, 'airline_inactive_alt_sep', 0)
                                  call extend(context, { 'left_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_alt_sep }, 'keep')
  651              0.000362     endif
  651   3.556340   0.011990     call s:invoke_funcrefs(context, g:airline_inactive_funcrefs)
  795              0.000822   endfor

FUNCTION  coc#compat#buf_set_lines()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/compat.vim:14
Called 18 times
Total time:   0.001857
 Self time:   0.001857

count  total (s)   self (s)
   18              0.000031   if s:is_vim
                                call coc#api#notify('buf_set_lines', [a:bufnr, a:start, a:end, 0, a:replacement])
   18              0.000011   else
   18              0.001673     call nvim_buf_set_lines(a:bufnr, a:start, a:end, 0, a:replacement)
   18              0.000030   endif

FUNCTION  coc#float#nvim_win_enter()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:1187
Called 26 times
Total time:   0.000550
 Self time:   0.000550

count  total (s)   self (s)
   26              0.000234   let kind = getwinvar(a:winid, 'kind', '')
   26              0.000096   if kind == 'buttons' || kind == 'close'
                                if empty(maparg('<LeftRelease>', 'n'))
                                  nnoremap <buffer><silent> <LeftRelease> :call coc#float#nvim_float_click()<CR>
                                endif
   26              0.000020   endif

FUNCTION  coc#start()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:113
Called 4 times
Total time:   0.002169
 Self time:   0.000224

count  total (s)   self (s)
    4   0.000784   0.000105   let opt = coc#util#get_complete_option()
    4   0.001373   0.000107   call CocActionAsync('startCompletion', extend(opt, get(a:, 1, {})))
    4              0.000004   return ''

FUNCTION  airline#extensions#term#inactive_apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/term.vim:26
Called 651 times
Total time:   0.024173
 Self time:   0.017578

count  total (s)   self (s)
  651              0.003353   if getbufvar(a:2.bufnr, '&buftype') ==? 'terminal'
   60   0.001657   0.000492     call a:1.add_section_spaced('airline_a', s:section_a)
   60   0.002241   0.000763     call a:1.add_section_spaced('airline_b', s:neoterm_id(a:2.bufnr))
   60   0.003416   0.000795     call a:1.add_section('airline_term', s:spc.s:termname(a:2.bufnr))
   60   0.000499   0.000270     call a:1.split()
   60   0.000529   0.000280     call a:1.add_section('airline_y', '')
   60   0.001154   0.000300     call a:1.add_section_spaced('airline_z', s:section_z)
   60              0.000065     return 1
  591              0.000385   endif

FUNCTION  <SNR>95_build_sections()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/default.vim:35
Called 873 times
Total time:   0.388931
 Self time:   0.072586

count  total (s)   self (s)
 4956              0.006506   for key in a:keys
 4083              0.013393     if (key == 'warning' || key == 'error') && !a:context.active
 1182              0.000890       continue
 2901              0.001368     endif
 2901   0.343608   0.027263     call s:add_section(a:builder, a:context, key)
 3774              0.002872   endfor

FUNCTION  coc#float#get_float_win_list()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:657
Called 269 times
Total time:   0.071568
 Self time:   0.071568

count  total (s)   self (s)
  269              0.000945   let res = []
  269              0.001767   let all = get(a:, 1, 0)
  269              0.000555   if s:is_vim
                                if s:popup_list_api
                                  return filter(popup_list(), 'popup_getpos(v:val)["visible"]'.(all ? '' : '&& getwinvar(v:val, "float", 0)'))
                                endif
                                return filter(s:popup_list, 's:popup_visible(v:val)')
  269              0.002848   elseif has('nvim') && exists('*nvim_win_get_config')
  269              0.000812     let res = []
 1157              0.003436     for i in range(1, winnr('$'))
  888              0.003281       let id = win_getid(i)
  888              0.037098       let config = nvim_win_get_config(id)
  888              0.005829       if empty(config) || empty(config['relative'])
  806              0.001378         continue
   82              0.000073       endif
                                  " ignore border & button window & others
   82              0.000424       if !all && !getwinvar(id, 'float', 0)
   29              0.000021         continue
   53              0.000041       endif
   53              0.000295       call add(res, id)
  322              0.000542     endfor
  269              0.000632     return res
                              endif
                              return []

FUNCTION  coc#float#close()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:631
Called 118 times
Total time:   0.202252
 Self time:   0.005353

count  total (s)   self (s)
  118   0.082620   0.002123   call coc#float#close_related(a:winid)
  118   0.119272   0.002870   call s:close_win(a:winid)
  118              0.000151   return 1

FUNCTION  airline#highlighter#highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:255
Called 147 times
Total time:  34.348137
 Self time:   2.546105

count  total (s)   self (s)
  147              0.000853     let bufnr = a:0 ? a:1 : ''
  147              0.000941     let p = g:airline#themes#{g:airline_theme}#palette
                            
                                " draw the base mode, followed by any overrides
  147              0.003100     let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
  147              0.000669     let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
  147              0.000575     let airline_grouplist = []
  147              0.001789     let buffers_in_tabpage = sort(tabpagebuflist())
  147              0.000648     if exists("*uniq")
  147              0.001008       let buffers_in_tabpage = uniq(buffers_in_tabpage)
  147              0.000136     endif
                                " mapped might be something like ['normal', 'normal_modified']
                                " if a group is in both modes available, only define the second
                                " that is how this was done previously overwrite the previous definition
  395              0.001165     for mode in reverse(mapped)
  248              0.002201       if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
  212              0.001103         let dict = g:airline#themes#{g:airline_theme}#palette[mode]
43641              0.090876         for kvp in items(dict)
43429              0.091004           let mode_colors = kvp[1]
43429              0.072985           let name = kvp[0]
43429              0.115707           if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
   21              0.000038             let name = 'airline_c'.bufnr
43429              0.022335           endif
                                      " do not re-create highlighting for buffers that are no longer visible
                                      " in the current tabpage
43429              0.254599           if name =~# 'airline_c\d\+'
40063              0.301366             let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
40063              0.135351             if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
39530              0.030842               continue
  533              0.000288             endif
 3366              0.022263           elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                        " group will be redefined below at exec_separator
                                        " or is not needed for tabline with '_inactive' suffix
                                        " since active flag is 1 for builder)
 1899              0.001697             continue
 2000              0.001065           endif
 2000   0.048075   0.023182           if s:group_not_done(airline_grouplist, name.suffix)
 1461   0.594734   0.020528             call airline#highlighter#exec(name.suffix, mode_colors)
 2000              0.001269           endif
                            
 2000              0.006419           if !has_key(p, 'accents')
                                        " work around a broken installation
                                        " shouldn't actually happen, p should always contain accents
                                        continue
 2000              0.001160           endif
                            
 6000              0.013154           for accent in keys(s:accents)
 4000              0.012739             if !has_key(p.accents, accent)
                                          continue
 4000              0.002210             endif
 4000              0.016984             let colors = copy(mode_colors)
 4000              0.012683             if p.accents[accent][0] != ''
 2000              0.007388               let colors[0] = p.accents[accent][0]
 4000              0.002154             endif
 4000              0.009462             if p.accents[accent][2] != ''
 2000              0.005570               let colors[2] = p.accents[accent][2]
 4000              0.002168             endif
 4000              0.008531             if len(colors) >= 5
 4000              0.017279               let colors[4] = get(p.accents[accent], 4, '')
                                        else
                                          call add(colors, get(p.accents[accent], 4, ''))
 4000              0.002033             endif
 4000   0.094271   0.050053             if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
 2922   1.150960   0.040108               call airline#highlighter#exec(name.suffix.'_'.accent, colors)
 4000              0.002465             endif
 6000              0.004245           endfor
 2212              0.001498         endfor
                            
  212              0.000554         if empty(s:separators)
                                      " nothing to be done
                                      continue
  212              0.000108         endif
                                    " TODO: optimize this
42830              0.103145         for sep in items(s:separators)
                                      " we cannot check, that the group already exists, else the separators
                                      " might not be correctly defined. But perhaps we can skip above groups
                                      " that match the '_to_' name, because they would be redefined here...
42618  30.715053   0.667191           call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
42830              0.033935         endfor
  248              0.000169       endif
  395              0.000617     endfor

FUNCTION  coc#rpc#ready()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:32
Called 4274 times
Total time:   0.066478
 Self time:   0.066478

count  total (s)   self (s)
 4274              0.039529   if empty(s:client) || s:client['running'] == 0
                                return 0
 4274              0.004357   endif
 4274              0.007089   return 1

FUNCTION  airline#parts#ffenc()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:108
Called 4962 times
Total time:   0.258859
 Self time:   0.258859

count  total (s)   self (s)
 4962              0.036635   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
 4962              0.018612   let bomb     = &bomb ? '[BOM]' : ''
 4962              0.035746   let noeolf   = &eol ? '' : '[!EOL]'
 4962              0.064973   let ff       = strlen(&ff) ? '['.&ff.']' : ''
 4962              0.044191   if expected is# &fenc.bomb.noeolf.ff
                                return ''
 4962              0.004497   else
 4962              0.034173     return &fenc.bomb.noeolf.ff
                              endif

FUNCTION  coc#float#close_auto_hide_wins()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:803
Called 138 times
Total time:   0.029836
 Self time:   0.003915

count  total (s)   self (s)
  138   0.027510   0.001589   let winids = coc#float#get_float_win_list()
  138              0.000513   let except = get(a:, 1, 0)
  167              0.000302   for id in winids
   29              0.000083     if except && id == except
   20              0.000015       continue
    9              0.000004     endif
    9              0.000024     if getwinvar(id, 'autohide', 0)
                                  call coc#float#close(id)
    9              0.000004     endif
  147              0.000118   endfor

FUNCTION  airline#util#ignore_buf()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:136
Called 4951 times
Total time:   0.300084
 Self time:   0.300084

count  total (s)   self (s)
 4951              0.062488   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
 4951              0.230343   return match(a:name, pat) > -1

FUNCTION  <SNR>83_hl_group_exists()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:99
Called 48824 times
Total time:   0.564890
 Self time:   0.564890

count  total (s)   self (s)
48824              0.121454     if !hlexists(a:group)
                                  return 0
48824              0.239525     elseif empty(synIDattr(synIDtrans(hlID(a:group)), 'fg'))
                                  return 0
48824              0.025698     endif
48824              0.041749     return 1

FUNCTION  <SNR>76_HighlightGenerateTags()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:83
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000004   return get(g:, 'go_highlight_generate_tags', 0)

FUNCTION  airline#update_tabline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:290
Called 547 times
Total time:   0.006772
 Self time:   0.006772

count  total (s)   self (s)
  547              0.003337   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
  547              0.000525   endif

FUNCTION  coc#_select_confirm()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:76
Called 26 times
Total time:   0.001559
 Self time:   0.001559

count  total (s)   self (s)
   26              0.000281   if !exists('*complete_info')
                                throw 'coc#_select_confirm requires complete_info function to work'
   26              0.000029   endif
   26              0.000924   let selected = complete_info()['selected']
   26              0.000091   if selected != -1
   26              0.000078      return "\<C-y>"
                              elseif pumvisible()
                                return "\<down>\<C-y>"
                              endif
                              return ''

FUNCTION  CocActionAsync()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:82
Called 139 times
Total time:   0.061080
 Self time:   0.004719

count  total (s)   self (s)
  139   0.060705   0.004344   return s:AsyncRequest(a:name, a:000)

FUNCTION  airline#parts#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:49
Called 4186 times
Total time:   0.033316
 Self time:   0.033316

count  total (s)   self (s)
 4186              0.029733   return get(s:parts, a:key, {})

FUNCTION  airline#parts#paste()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:63
Called 4186 times
Total time:   0.028468
 Self time:   0.028468

count  total (s)   self (s)
 4186              0.025091   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  coc#util#check_refresh()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:67
Called 239 times
Total time:   0.005899
 Self time:   0.005899

count  total (s)   self (s)
  239              0.001121   if !bufloaded(a:bufnr)
                                return 0
  239              0.000187   endif
  239              0.001149   if getbufvar(a:bufnr, 'coc_diagnostic_disable', 0)
                                return 0
  239              0.000125   endif
  239              0.000943   if get(g: , 'EasyMotion_loaded', 0)
                                return EasyMotion#is_active() != 1
  239              0.000121   endif
  239              0.000325   return 1

FUNCTION  airline#update_statusline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:144
Called 144 times
Total time:   5.326668
 Self time:   0.014924

count  total (s)   self (s)
  144   0.010271   0.001800   if airline#util#stl_disabled(winnr())
                                return
  144              0.000111   endif
  144              0.002259   let range = filter(range(1, winnr('$')), 'v:val != winnr()')
                              " create inactive statusline
  144   3.632520   0.002157   call airline#update_statusline_inactive(range)
                            
  144              0.000428   unlet! w:airline_render_left w:airline_render_right
  144              0.002279   exe 'unlet! ' 'w:airline_section_'. join(s:sections, ' w:airline_section_')
                            
                              " Now create the active statusline
  144              0.000288   let w:airline_active = 1
  144              0.001269   let context = { 'winnr': winnr(), 'active': 1, 'bufnr': winbufnr(winnr()) }
  144   1.676377   0.003468   call s:invoke_funcrefs(context, g:airline_statusline_funcrefs)

FUNCTION  <SNR>87_check_mixed_indent()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:17
Called 62 times
Total time:   0.242398
 Self time:   0.242398

count  total (s)   self (s)
   62              0.000500   let indent_algo = get(g:, 'airline#extensions#whitespace#mixed_indent_algo', 0)
   62              0.000178   if indent_algo == 1
                                " [<tab>]<space><tab>
                                " spaces before or between tabs are not allowed
                                let t_s_t = '(^\t* +\t\s*\S)'
                                " <tab>(<space> x count)
                                " count of spaces at the end of tabs should be less than tabstop value
                                let t_l_s = '(^\t+ {' . &ts . ',}' . '\S)'
                                return search('\v' . t_s_t . '|' . t_l_s, 'nw')
   62              0.000175   elseif indent_algo == 2
                                return search('\v(^\t* +\t\s*\S)', 'nw', 0, 500)
   62              0.000070   else
   62              0.240146     return search('\v(^\t+ +)|(^ +\t+)', 'nw', 0, 500)
                              endif

FUNCTION  <SNR>76_HighlightFunctionCalls()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:59
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_function_calls', 0)

FUNCTION  <SNR>76_HighlightFunctions()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:51
Called 1 time
Total time:   0.000003
 Self time:   0.000003

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_functions', 0)

FUNCTION  airline#parts#readonly()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:89
Called 4962 times
Total time:   0.475855
 Self time:   0.175771

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
 4962   0.394516   0.094433   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
   11              0.000014     return ''
 4951              0.004410   endif
 4951              0.023724   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
 4951              0.003906   else
 4951              0.017834     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  <SNR>28_notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:189
Called 4098 times
Total time:   0.863368
 Self time:   0.819406

count  total (s)   self (s)
 4098   0.110093   0.066132   let channel = coc#client#get_channel(self)
 4098              0.013091   if empty(channel)
                                return ''
 4098              0.003321   endif
 4098              0.005743   try
 4098              0.007213     if s:is_vim
                                  call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
 4098              0.004929     else
 4098              0.456419       call call('rpcnotify', [channel, a:method] + a:args)
 4098              0.011791     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
 4098              0.006654   endtry

FUNCTION  airline#builder#should_change_group()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:130
Called 2217 times
Total time:   0.863613
 Self time:   0.083361

count  total (s)   self (s)
 2217              0.005585   if a:group1 == a:group2
                                return 0
 2217              0.001413   endif
 2217   0.419929   0.023397   let color1 = airline#highlighter#get_highlight(a:group1)
 2217   0.418006   0.034286   let color2 = airline#highlighter#get_highlight(a:group2)
 2217              0.013583   return color1[1] != color2[1] || color1[0] != color2[0] ||  color1[2] != color2[2] || color1[3] != color2[3]

FUNCTION  GoIndent()
    Defined: /usr/local/share/nvim/runtime/indent/go.vim:26
Called 34 times
Total time:   0.005648
 Self time:   0.005648

count  total (s)   self (s)
   34              0.000618   let l:prevlnum = prevnonblank(a:lnum-1)
   34              0.000166   if l:prevlnum == 0
                                " top of file
                                return 0
   34              0.000049   endif
                            
                              " grab the previous and current line, stripping comments.
   34              0.000742   let l:prevl = substitute(getline(l:prevlnum), '//.*$', '', '')
   34              0.000535   let l:thisl = substitute(getline(a:lnum), '//.*$', '', '')
   34              0.000174   let l:previ = indent(l:prevlnum)
                            
   34              0.000095   let l:ind = l:previ
                            
   34              0.000515   if l:prevl =~ '[({]\s*$'
                                " previous line opened a block
   11              0.000046     let l:ind += shiftwidth()
   34              0.000050   endif
   34              0.000589   if l:prevl =~# '^\s*\(case .*\|default\):$'
                                " previous line is part of a switch statement
                                let l:ind += shiftwidth()
   34              0.000037   endif
                              " TODO: handle if the previous line is a label.
                            
   34              0.000303   if l:thisl =~ '^\s*[)}]'
                                " this line closed a block
    5              0.000012     let l:ind -= shiftwidth()
   34              0.000031   endif
                            
                              " Colons are tricky.
                              " We want to outdent if it's part of a switch ("case foo:" or "default:").
                              " We ignore trying to deal with jump labels because (a) they're rare, and
                              " (b) they're hard to disambiguate from a composite literal key.
   34              0.000396   if l:thisl =~# '^\s*\(case .*\|default\):$'
                                let l:ind -= shiftwidth()
   34              0.000029   endif
                            
   34              0.000082   return l:ind

FUNCTION  <SNR>65_Highlight_Matching_Pair()
    Defined: /usr/local/share/nvim/runtime/plugin/matchparen.vim:40
Called 1592 times
Total time:   0.505528
 Self time:   0.475473

count  total (s)   self (s)
                              " Remove any previous match.
 1592   0.051781   0.021725   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
 1592              0.012333   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
 1592              0.001334   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
 1592              0.007634   let c_lnum = line('.')
 1592              0.005705   let c_col = col('.')
 1592              0.004346   let before = 0
                            
 1592              0.013002   let text = getline(c_lnum)
 1592              0.056898   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
 1592              0.007045   if empty(matches)
                                let [c_before, c] = ['', '']
 1592              0.001853   else
 1592              0.014726     let [c_before, c] = matches[1:2]
 1592              0.001677   endif
 1592              0.040668   let plist = split(&matchpairs, '.\zs[:,]')
 1592              0.009846   let i = index(plist, c)
 1592              0.003820   if i < 0
                                " not found, in Insert mode try character before the cursor
 1272              0.009912     if c_col > 1 && (mode() == 'i' || mode() == 'R')
  870              0.004151       let before = strlen(c_before)
  870              0.002364       let c = c_before
  870              0.003756       let i = index(plist, c)
 1272              0.001370     endif
 1272              0.002563     if i < 0
                                  " not found, nothing to do
 1265              0.002315       return
    7              0.000007     endif
  327              0.000243   endif
                            
                              " Figure out the arguments for searchpairpos().
  327              0.000679   if i % 2 == 0
   48              0.000137     let s_flags = 'nW'
   48              0.000341     let c2 = plist[i + 1]
  279              0.000197   else
  279              0.000673     let s_flags = 'nbW'
  279              0.000599     let c2 = c
  279              0.000974     let c = plist[i - 1]
  327              0.000246   endif
  327              0.000562   if c == '['
   58              0.000101     let c = '\['
   58              0.000099     let c2 = '\]'
  327              0.000292   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
  327              0.000574   if before > 0
    7              0.000045     let has_getcurpos = exists("*getcurpos")
    7              0.000014     if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
    7              0.000039       let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
    7              0.000007     endif
    7              0.000058     call cursor(c_lnum, c_col - before)
  327              0.000218   endif
                            
  327              0.002632   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
  327              0.000293   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
  327              0.001896     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
  327              0.000368     try
  327              0.050469       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
  327              0.000367     endtry
  327              0.000245   endif
                            
                              " Limit the search to lines visible in the window.
  327              0.001391   let stoplinebottom = line('w$')
  327              0.001062   let stoplinetop = line('w0')
  327              0.000672   if i % 2 == 0
   48              0.000226     let stopline = stoplinebottom
  279              0.000212   else
  279              0.000861     let stopline = stoplinetop
  327              0.000246   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
  327              0.001327   if mode() == 'i' || mode() == 'R'
  238              0.001776     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
   89              0.000069   else
   89              0.000675     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
  327              0.000226   endif
  327              0.000296   try
  327              0.083931     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
  327              0.000378   endtry
                            
  327              0.000632   if before > 0
    7              0.000015     if has_getcurpos
    7              0.000112       call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
    7              0.000007     endif
  327              0.000221   endif
                            
                              " If a match is found setup match highlighting.
  327              0.001814   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
  314              0.001112     if exists('*matchaddpos')
  314              0.003927       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
  314              0.000231     endif
  314              0.000863     let w:paren_hl_on = 1
  327              0.000244   endif

FUNCTION  coc#highlight#add_highlights()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:267
Called 138 times
Total time:   0.222855
 Self time:   0.008790

count  total (s)   self (s)
                              " clear highlights
  138   0.016198   0.001235   call coc#compat#execute(a:winid, 'syntax clear')
  138              0.000506   let bufnr = winbufnr(a:winid)
  138   0.011161   0.002652   call coc#highlight#clear_highlight(bufnr, -1, 0, -1)
  138              0.000329   if !empty(a:codes)
  138   0.191957   0.001850     call coc#highlight#highlight_lines(a:winid, a:codes)
  138              0.000074   endif
  138              0.000382   if !empty(a:highlights)
   18              0.000033     for item in a:highlights
    9   0.000654   0.000168       call coc#highlight#add_highlight(bufnr, -1, item['hlGroup'], item['lnum'], item['colStart'], item['colEnd'])
   18              0.000015     endfor
  138              0.000079   endif

FUNCTION  <SNR>23_SynSet()
    Defined: /usr/local/share/nvim/runtime/syntax/synload.vim:26
Called 18 times
Total time:   0.022813
 Self time:   0.007472

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
   18              0.000211   syn clear
   18              0.000079   if exists("b:current_syntax")
                                unlet b:current_syntax
   18              0.000012   endif
                            
   18              0.000062   let s = expand("<amatch>")
   18              0.000026   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
   18              0.000022   elseif s == "OFF"
                                let s = ""
   18              0.000009   endif
                            
   18              0.000018   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
   36              0.000137     for name in split(s, '\.')
   18              0.000036       if !empty(name)
   18   0.019132   0.003791         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
   18              0.002699         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
   18              0.000016       endif
   36              0.000028     endfor
   18              0.000011   endif

FUNCTION  airline#extensions#append_to_section()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:53
Called 141 times
Total time:   0.004426
 Self time:   0.002275

count  total (s)   self (s)
  141   0.003656   0.001505   call <sid>check_defined_section(a:name)
  141              0.000643   let w:airline_section_{a:name} .= a:value

FUNCTION  coc#cursor#screen_pos()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/cursor.vim:4
Called 40 times
Total time:   0.000674
 Self time:   0.000674

count  total (s)   self (s)
   40              0.000114   let nr = winnr()
   40              0.000273   let [row, col] = win_screenpos(nr)
   40              0.000222   return [row + winline() - 2, col + wincol() - 2]

FUNCTION  coc#float#close_related()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:840
Called 317 times
Total time:   0.116513
 Self time:   0.097875

count  total (s)   self (s)
  317   0.022486   0.003848   let tabnr = coc#window#tabnr(a:winid)
  317              0.000646   if tabnr != -1
  317              0.001624     let timer = gettabwinvar(tabnr, a:winid, 'timer', 0)
  317              0.000374     if timer
                                  call timer_stop(timer)
  317              0.000275     endif
  317              0.001365     let kind = get(a:, 1, '')
  317              0.001632     let winids = gettabwinvar(tabnr, a:winid, 'related', [])
  613              0.001491     for id in winids
  296              0.000519       if s:is_vim
                                    " vim doesn't throw
                                    noa call popup_close(id)
  296              0.000269       else
  296              0.001848         if empty(kind) || gettabwinvar(tabnr, id, 'kind', '') ==# kind
  236              0.005888           if nvim_win_is_valid(id)
  118              0.061405             noa call nvim_win_close(id, 1)
  236              0.000375           endif
  296              0.000171         endif
  296              0.000509       endif
  613              0.000716     endfor
  317              0.000427   endif

FUNCTION  coc#helper#min()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/helper.vim:129
Called 534 times
Total time:   0.012545
 Self time:   0.012545

count  total (s)   self (s)
  534              0.001256   let val = a:first
 1108              0.003485   for i in range(0, len(a:000) - 1)
  574              0.001357     if a:000[i] < val
  409              0.000885       let val = a:000[i]
  574              0.000424     endif
 1108              0.000858   endfor
  534              0.000805   return val

FUNCTION  airline#highlighter#exec()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:219
Called 50160 times
Total time:  15.722689
 Self time:   5.386090

count  total (s)   self (s)
50160              0.090127     if pumvisible()
                                  return
50160              0.036920     endif
50160              0.099647     let colors = a:colors
50160              0.113125     if len(colors) == 4
45632              0.119741       call add(colors, '')
50160              0.028620     endif
                                " colors should always be string values
50160              1.028767     let colors = map(copy(colors), 'type(v:val) != type("") ? string(v:val) : v:val')
50160              0.071216     if s:is_win32term
                                  let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                  let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
50160              0.028015     endif
50160   9.276383   0.543049     let old_hi = airline#highlighter#get_highlight(a:group)
50160              0.477474     let new_hi = [colors[0], colors[1], printf('%s', colors[2]), printf('%s', colors[3]), colors[4]]
50160   1.284602   0.418880     let colors = s:CheckDefined(colors)
50160   1.021429   0.456539     if old_hi != new_hi || !s:hl_group_exists(a:group)
 1336   0.187835   0.015184       let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
 1336              0.001267       try
 1336              0.015319         exe cmd
                                  catch /^Vim\%((\a\+)\)\=:E421:/ " color definition not found
                                    let group=matchstr(v:exception, '\w\+\ze=')
                                    let color=matchstr(v:exception, '=\zs\w\+')
                                    let cmd=substitute(cmd, color, 'grey', 'g')
                                    exe cmd
                                    call airline#util#warning('color definition for group ' . a:group . ' not found, using grey as fallback')
                                  catch
                                    call airline#util#warning('Error when running command: '. cmd)
 1336              0.001570       endtry
 1336              0.004987       if has_key(s:hl_groups, a:group)
 1336              0.004867         let s:hl_groups[a:group] = colors
 1336              0.000968       endif
50160              0.026633     endif

FUNCTION  airline#extensions#searchcount#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim:15
Called 141 times
Total time:   0.006247
 Self time:   0.001821

count  total (s)   self (s)
  141   0.006145   0.001720   call airline#extensions#append_to_section('y', '%{v:hlsearch ? airline#extensions#searchcount#status() : ""}')

FUNCTION  <SNR>87_ws_refresh()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:186
Called 139 times
Total time:   0.004507
 Self time:   0.004507

count  total (s)   self (s)
  139              0.000971   if !exists('#airline')
                                " airline disabled
                                return
  139              0.000187   endif
  139              0.001139   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
   79              0.000128     return
   60              0.000062   endif
   60              0.000304   unlet! b:airline_whitespace_check
   60              0.000316   if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
   60              0.000058   endif
   60              0.000348   let b:airline_ws_changedtick = b:changedtick

FUNCTION  <SNR>77_is_excluded_window()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:111
Called 732 times
Total time:   0.042906
 Self time:   0.042906

count  total (s)   self (s)
  732              0.002382   for matchft in g:airline_exclude_filetypes
                                if matchft ==# &ft
                                  return 1
                                endif
  732              0.000754   endfor
                            
 2928              0.004105   for matchw in g:airline_exclude_filenames
 2196              0.018434     if matchstr(expand('%'), matchw) ==# matchw
                                  return 1
 2196              0.001143     endif
 2928              0.001876   endfor
                            
  732              0.001561   if g:airline_exclude_preview && &previewwindow
                                return 1
  732              0.000423   endif
                            
  732              0.000711   return 0

FUNCTION  airline#parts#spell()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:67
Called 4186 times
Total time:   0.215279
 Self time:   0.215279

count  total (s)   self (s)
 4186              0.089754   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
 4186              0.016199   if g:airline_detect_spell && &spell
                                let winwidth = airline#util#winwidth()
                                if winwidth >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                elseif !empty(g:airline_symbols.spell)
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
 4186              0.003635   endif
 4186              0.006280   return ''

FUNCTION  <SNR>79_invoke_funcrefs()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:194
Called 795 times
Total time:   5.217259
 Self time:   0.054909

count  total (s)   self (s)
  795   0.034747   0.007461   let builder = airline#builder#new(a:context)
  795   0.793558   0.013170   let err = airline#util#exec_funcrefs(a:funcrefs + s:core_funcrefs, builder, a:context)
  795              0.001084   if err == 1
  795   4.363491   0.008815     let a:context.line = builder.build()
  795              0.007035     let s:contexts[a:context.winnr] = a:context
  795              0.004190     let option = get(g:, 'airline_statusline_ontop', 0) ? '&tabline' : '&statusline'
  795              0.010989     call setwinvar(a:context.winnr, option, '%!airline#statusline('.a:context.winnr.')')
  795              0.000596   endif

FUNCTION  <SNR>96_empty_border()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:982
Called 434 times
Total time:   0.002397
 Self time:   0.002397

count  total (s)   self (s)
  434              0.001157   if empty(a:border)
  394              0.000447     return 1
   40              0.000026   endif
   40              0.000278   if a:border[0] == 0 && a:border[1] == 0 && a:border[2] == 0 && a:border[3] == 0
   40              0.000048     return 1
                              endif
                              return 0

FUNCTION  coc#float#content_height()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:816
Called 138 times
Total time:   0.012827
 Self time:   0.012827

count  total (s)   self (s)
  138              0.000461   if !bufloaded(a:bufnr)
                                return 0
  138              0.000094   endif
  138              0.000156   if !a:wrap
                                return has('nvim') ? nvim_buf_line_count(a:bufnr) : len(getbufline(a:bufnr, 1, '$'))
  138              0.000071   endif
  138              0.003557   let lines = has('nvim') ? nvim_buf_get_lines(a:bufnr, 0, -1, 0) : getbufline(a:bufnr, 1, '$')
  138              0.000269   let total = 0
  445              0.000676   for line in lines
  307              0.001856     let dw = max([1, strdisplaywidth(line)])
  307              0.002367     let total += float2nr(ceil(str2float(string(dw))/a:width))
  445              0.000350   endfor
  138              0.000283   return total

FUNCTION  coc#window#find()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/window.vim:15
Called 30 times
Total time:   0.003423
 Self time:   0.003423

count  total (s)   self (s)
  197              0.000807   for i in range(1, winnr('$'))
  167              0.000875     let res = getwinvar(i, a:key)
  167              0.000379     if res == a:val
                                  return win_getid(i)
  167              0.000134     endif
  197              0.000211   endfor
   30              0.000067   return -1

FUNCTION  airline#parts#crypt()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:59
Called 4186 times
Total time:   0.086379
 Self time:   0.086379

count  total (s)   self (s)
 4186              0.082383   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  <SNR>76_HighlightTypes()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:67
Called 1 time
Total time:   0.000003
 Self time:   0.000003

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_types', 0)

FUNCTION  <SNR>83_get_array()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:60
Called 145854 times
Total time:   1.004835
 Self time:   1.004835

count  total (s)   self (s)
145854              0.933790     return [ a:guifg, a:guibg, a:ctermfg, a:ctermbg, empty(a:opts) ? '' : join(a:opts, ',') ]

FUNCTION  coc#snippet#disable()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/snippet.vim:56
Called 2 times
Total time:   0.000408
 Self time:   0.000408

count  total (s)   self (s)
    2              0.000056   if get(b:, 'coc_snippet_active', 0) == 0
                                return
    2              0.000004   endif
    2              0.000015   let b:coc_snippet_active = 0
    2              0.000023   let nextkey = get(g:, 'coc_snippet_next', '<C-j>')
    2              0.000013   let prevkey = get(g:, 'coc_snippet_prev', '<C-k>')
    2              0.000007   if s:map_next
    2              0.000050     silent! execute 'iunmap <buffer> <silent> '.nextkey
    2              0.000003   endif
    2              0.000025   silent! execute 'iunmap <buffer> <silent> '.prevkey
    2              0.000050   silent! execute 'sunmap <buffer> <silent> '.prevkey
    2              0.000026   silent! execute 'sunmap <buffer> <silent> '.nextkey

FUNCTION  coc#helper#dict_pick()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/helper.vim:118
Called 138 times
Total time:   0.013142
 Self time:   0.013142

count  total (s)   self (s)
  138              0.000334   let res = {}
 1544              0.002473   for key in keys(a:dict)
 1406              0.003963     if index(a:keys, key) != -1
  788              0.002284       let res[key] = a:dict[key]
 1406              0.000771     endif
 1544              0.000913   endfor
  138              0.000205   return res

FUNCTION  airline#extensions#nvimlsp#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim:17
Called 8372 times
Total time:   0.429123
 Self time:   0.429123

count  total (s)   self (s)
 8372              0.400238   if luaeval('vim.tbl_isempty(vim.lsp.buf_get_clients(0))')
 8372              0.016961     return ''
                              endif
                            
                              let error_symbol = get(g:, 'airline#extensions#nvimlsp#error_symbol', 'E:')
                              let warning_symbol = get(g:, 'airline#extensions#nvimlsp#warning_symbol', 'W:')
                            
                              let is_err = a:type ==# 'Error'
                            
                              let symbol = is_err ? error_symbol : warning_symbol
                            
                              if luaeval("pcall(require, 'vim.lsp.diagnostic')")
                                let num = v:lua.vim.lsp.diagnostic.get_count(0, a:type)
                              else
                                let num = v:lua.vim.lsp.util.buf_diagnostics_count(a:type)
                              endif
                            
                              return s:airline_nvimlsp_count(num, symbol)

FUNCTION  <SNR>96_add_highlights()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:1852
Called 138 times
Total time:   0.231769
 Self time:   0.008299

count  total (s)   self (s)
  138              0.000660   let codes = get(a:config, 'codes', [])
  138              0.000469   let highlights = get(a:config, 'highlights', [])
  138              0.000520   if empty(codes) && empty(highlights) && a:create
                                return
  138              0.000082   endif
  138              0.000537   let bgGroup = get(a:config, 'highlight', 'CocFloating')
  292              0.000505   for obj in codes
  154              0.000597     let hlGroup = get(obj, 'hlGroup', v:null)
  154              0.000416     if !empty(hlGroup)
   31   0.001090   0.000475       let obj['hlGroup'] = coc#highlight#compose_hlgroup(hlGroup, bgGroup)
  154              0.000089     endif
  292              0.000253   endfor
  138   0.224563   0.001708   call coc#highlight#add_highlights(a:winid, codes, highlights)

FUNCTION  airline#parts#mode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:55
Called 4277 times
Total time:   0.341712
 Self time:   0.088351

count  total (s)   self (s)
 4277   0.336631   0.083271   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>81_termname()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/term.vim:48
Called 63 times
Total time:   0.002393
 Self time:   0.002393

count  total (s)   self (s)
   63              0.000220   let bufname = bufname(a:bufnr)
   63              0.000312   if has('nvim')
                                " Get rid of the leading "term", working dir and process ID.
                                " Afterwards, remove the possibly added neoterm ID.
   63              0.001741     return substitute(matchstr(bufname, 'term.*:\zs.*'), ';#neoterm-\d\+', '', '')
                              else
                                if bufname =~? 'neoterm-\d\+'
                                  " Do not return a redundant buffer name, when this is a neoterm terminal.
                                  return ''
                                endif
                                " Get rid of the leading "!".
                                if bufname[0] ==? '!'
                                  return bufname[1:]
                                else
                                  return bufname
                                endif
                              endif

FUNCTION  <SNR>83_get_syn()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:44
Called 583416 times
Total time:  12.359179
 Self time:  12.359179

count  total (s)   self (s)
583416              0.815219     let color = ''
583416              1.264160     if hlexists(a:group)
417968              1.994216       let color = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)
583416              0.328981     endif
583416              1.304466     if empty(color) || color == -1
                                  " should always exist
249192              1.018295       let color = synIDattr(synIDtrans(hlID('Normal')), a:what, a:mode)
                                  " however, just in case
249192              0.483460       if empty(color) || color == -1
207830              0.250132         let color = 'NONE'
249192              0.136615       endif
583416              0.300181     endif
583416              0.637953     return color

FUNCTION  coc#util#get_bufoptions()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:214
Called 8 times
Total time:   0.001614
 Self time:   0.001045

count  total (s)   self (s)
    8              0.000109   if !bufloaded(a:bufnr) | return v:null | endif
    8              0.000031   let bufname = bufname(a:bufnr)
    8              0.000039   let buftype = getbufvar(a:bufnr, '&buftype')
    8              0.000040   let winid = bufwinid(a:bufnr)
    8              0.000013   let size = -1
    8              0.000035   if bufnr('%') == a:bufnr
    8              0.000061     let size = line2byte(line("$") + 1)
                              elseif !empty(bufname)
                                let size = getfsize(bufname)
    8              0.000017   endif
    8              0.000013   let lines = []
    8              0.000046   if getbufvar(a:bufnr, 'coc_enabled', 1) && (buftype == '' || buftype == 'acwrite') && size < a:maxFileSize
    3              0.000106     let lines = getbufline(a:bufnr, 1, '$')
    8              0.000004   endif
    8   0.001035   0.000466   return { 'bufname': bufname, 'size': size, 'buftype': buftype, 'winid': winid, 'previewwindow': v:false, 'variables': s:variables(a:bufnr), 'fullpath': empty(bufname) ? '' : fnamemodify(bufname, ':p'), 'eol': getbufvar(a:bufnr, '&eol'), 'filetype': getbufvar(a:bufnr, '&filetype'), 'iskeyword': getbufvar(a:bufnr, '&iskeyword'), 'changedtick': getbufvar(a:bufnr, 'changedtick'), 'lines': lines,}

FUNCTION  airline#extensions#quickfix#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim:14
Called 144 times
Total time:   0.001801
 Self time:   0.001801

count  total (s)   self (s)
  144              0.000440   if &buftype == 'quickfix'
                                let w:airline_section_a = airline#extensions#quickfix#get_type()
                                let w:airline_section_b = '%{get(w:, "quickfix_title", "")}'
                                let w:airline_section_c = ''
                                let w:airline_section_x = ''
  144              0.000113   endif

FUNCTION  <SNR>83_exec_separator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:189
Called 45630 times
Total time:  32.381899
 Self time:   2.501325

count  total (s)   self (s)
45630              0.089003     if pumvisible()
                                  return
45630              0.023979     endif
45630              0.178866     let group = a:from.'_to_'.a:to.a:suffix
45630   8.573625   0.436774     let l:from = airline#themes#get_highlight(a:from.a:suffix)
45630   8.265789   0.459525     let l:to = airline#themes#get_highlight(a:to.a:suffix)
45630              0.053805     if a:inverse
 1044              0.005385       let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
44586              0.026041     else
44586              0.222506       let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
45630              0.024621     endif
45630              0.215877     let a:dict[group] = colors
45630  14.446588   0.509129     call airline#highlighter#exec(group, colors)

FUNCTION  coc#_complete()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:50
Called 271 times
Total time:   1.326352
 Self time:   0.317559

count  total (s)   self (s)
  271              0.002806   let items = get(g:coc#_context, 'candidates', [])
  271              0.001371   let preselect = get(g:coc#_context, 'preselect', -1)
  271              0.001059   let startcol = g:coc#_context.start + 1
  271              0.001639   if s:select_api && len(items) && preselect != -1
                                noa call complete(startcol, items)
                                call nvim_select_popupmenu_item(preselect, v:false, v:false, {})
                                " use <cmd> specific key to preselect item at once
                                call feedkeys("\<Cmd>\<CR>" , 'i')
  271              0.000375   else
  271   1.311419   0.302626     call complete(startcol, items)
  271              0.000697   endif
  271              0.000604   return ''

FUNCTION  airline#extensions#wordcount#apply()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim:88
Called 141 times
Total time:   0.007345
 Self time:   0.007345

count  total (s)   self (s)
  141              0.001330   let filetypes = get(g:, 'airline#extensions#wordcount#filetypes',  ['asciidoc', 'help', 'mail', 'markdown', 'nroff', 'org', 'rst', 'plaintex', 'tex', 'text'])
                              " export current filetypes settings to global namespace
  141              0.000731   let g:airline#extensions#wordcount#filetypes = filetypes
                            
                              " Check if filetype needs testing
  141              0.000323   if did_filetype()
                                " correctly test for compound filetypes (e.g. markdown.pandoc)
   10              0.000056     let ft = substitute(&filetype, '\.', '\\|', 'g')
                            
                                " Select test based on type of "filetypes": new=list, old=string
   10              0.000672     if type(filetypes) == get(v:, 't_list', type([])) ? match(filetypes, '\<'. ft. '\>') > -1 || index(filetypes, 'all') > -1 : match(&filetype, filetypes) > -1
                                  let b:airline_changedtick = -1
                                  call s:update_wordcount(1) " force update: ensures initial worcount exists
   10              0.000040     elseif exists('b:airline_wordcount') " cleanup when filetype is removed
                                  unlet b:airline_wordcount
   10              0.000005     endif
  141              0.000080   endif
                            
  141              0.000393   if exists('b:airline_wordcount')
                                call airline#extensions#prepend_to_section( 'z', '%{airline#extensions#wordcount#get()}')
  141              0.000086   endif

FUNCTION  CocAction()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:71
Called 8 times
Total time:   0.258683
 Self time:   0.000261

count  total (s)   self (s)
    8              0.000084   if !get(g:, 'coc_service_initialized', 0)
                                throw 'coc.nvim not ready when invoke CocAction "'.a:name.'"'
    8              0.000007   endif
    8   0.258534   0.000111   return coc#rpc#request(a:name, a:000)

FUNCTION  airline#highlighter#add_separator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:184
Called 3012 times
Total time:   2.398717
 Self time:   0.064680

count  total (s)   self (s)
 3012              0.024008     let s:separators[a:from.a:to] = [a:from, a:to, a:inverse]
 3012   2.372851   0.038814     call <sid>exec_separator({}, a:from, a:to, a:inverse, '')

FUNCTION  airline#extensions#nvimlsp#get_warning()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim:38
Called 4186 times
Total time:   0.347843
 Self time:   0.075296

count  total (s)   self (s)
 4186   0.343955   0.071408   return airline#extensions#nvimlsp#get('Warning')

FUNCTION  <SNR>96_close_win()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:1630
Called 118 times
Total time:   0.116402
 Self time:   0.015966

count  total (s)   self (s)
  118              0.000360   if a:winid <= 0
                                return
  118              0.000080   endif
                              " vim not throw for none exists winid
  118              0.000187   if s:is_vim
                                call popup_close(a:winid)
  118              0.000080   else
  118              0.003766     if nvim_win_is_valid(a:winid)
  118   0.111010   0.010575       call nvim_win_close(a:winid, 1)
  118              0.000101     endif
  118              0.000077   endif

FUNCTION  <SNR>54_on_window_changed()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:51
Called 378 times
Total time:   5.355377
 Self time:   0.028008

count  total (s)   self (s)
                              " don't trigger for Vim popup windows
  378              0.001798   if &buftype is# 'popup'
                                return
  378              0.000546   endif
                            
  378              0.001714   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
                                " do not trigger for previewwindows
                                return
  378              0.000235   endif
  378              0.001695   let s:active_winnr = winnr()
                              " Handle each window only once, since we might come here several times for
                              " different autocommands.
  378              0.005750   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
  378              0.007569   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
                                " fugitive is special, it changes names and filetypes several times,
                                " make sure the caching does not get into its way
  234              0.000322     return
  144              0.000083   endif
  144              0.001226   let g:airline_last_window_changed = l:key
  144   0.002018   0.001316   call s:init()
  144   5.328498   0.001830   call airline#update_statusline()

FUNCTION  coc#float#nvim_create_related()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:199
Called 138 times
Total time:   0.113816
 Self time:   0.022201

count  total (s)   self (s)
  138              0.000712   let related = getwinvar(a:winid, 'related', [])
  138              0.000431   let exists = !empty(related)
  138              0.000443   let border = get(a:opts, 'border', [])
  138              0.000454   let highlights = get(a:opts, 'borderhighlight', [])
  138              0.000425   let hlgroup = get(a:opts, 'highlight', 'CocFloating')
  138              0.001003   let borderhighlight = type(highlights) == 1 ? highlights : get(highlights, 0, 'CocFloating')
  138   0.002923   0.001633   let borderhighlight =  coc#highlight#compose_hlgroup(borderhighlight, hlgroup)
  138              0.000499   let title = get(a:opts, 'title', '')
  138              0.000423   let buttons = get(a:opts, 'buttons', [])
  138              0.000537   let pad = empty(border) || get(border, 1, 0) == 0
  138              0.000387   let winblend = get(a:opts, 'winblend', 0)
  138              0.000388   let shadow = get(a:opts, 'shadow', 0)
  138              0.000292   if get(a:opts, 'close', 0)
                                call coc#float#nvim_close_btn(a:config, a:winid, border, borderhighlight, winblend, related)
  138              0.000193   elseif exists
   20   0.002410   0.000226     call coc#float#close_related(a:winid, 'close')
  138              0.000088   endif
  138              0.000285   if !empty(buttons)
                                call coc#float#nvim_buttons(a:config, a:winid, buttons, get(border, 2, 0), pad, hlgroup, borderhighlight, winblend, shadow, related)
  138              0.000141   elseif exists
   20   0.002064   0.000199     call coc#float#close_related(a:winid, 'buttons')
  138              0.000113   endif
  138   0.001937   0.001254   if !s:empty_border(border)
                                call coc#float#nvim_border_win(a:config, a:winid, border, title, !empty(buttons), borderhighlight, winblend, shadow, related)
  138              0.000157   elseif exists
   20   0.012734   0.000187     call coc#float#close_related(a:winid, 'border')
  138              0.000089   endif
                              " Check right border
  138              0.000132   if pad
  138   0.075257   0.002210     call coc#float#nvim_right_pad(a:config, a:winid, hlgroup, winblend, related)
                              elseif exists
                                call coc#float#close_related(a:winid, 'pad')
  138              0.000085   endif
  138              0.004053   call setwinvar(a:winid, 'related', filter(related, 'nvim_win_is_valid(v:val)'))

FUNCTION  airline#statusline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:207
Called 5053 times
Total time:   0.125054
 Self time:   0.125054

count  total (s)   self (s)
 5053              0.050704   if has_key(s:contexts, a:winnr)
 5053              0.060627     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  <SNR>83_group_not_done()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:32
Called 6000 times
Total time:   0.069112
 Self time:   0.069112

count  total (s)   self (s)
 6000              0.027081     if index(a:list, a:name) == -1
 4383              0.016505       call add(a:list, a:name)
 4383              0.005927       return 1
 1617              0.000865     else
 1617              0.002527       if &vbs
                                    echomsg printf("airline: group: %s already done, skipping", a:name)
 1617              0.000837       endif
 1617              0.001463       return 0
                                endif

FUNCTION  <SNR>76_FoldEnable()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:20
Called 14 times
Total time:   0.000219
 Self time:   0.000142

count  total (s)   self (s)
   14              0.000023   if a:0 > 0
    7              0.000026     return index(s:FoldEnable(), a:1) > -1
    7              0.000005   endif
    7              0.000033   return get(g:, 'go_fold_enable', ['block', 'import', 'varconst', 'package_comment'])

FUNCTION  coc#highlight#clear_highlight()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:241
Called 158 times
Total time:   0.010483
 Self time:   0.009467

count  total (s)   self (s)
  158              0.000732   let bufnr = a:bufnr == 0 ? bufnr('%') : a:bufnr
  158              0.000413   if !bufloaded(bufnr)
                                return
  158              0.000088   endif
  158   0.002760   0.001743   let src_id = coc#highlight#create_namespace(a:key)
  158              0.000510   if has('nvim')
  158              0.004416     call nvim_buf_clear_namespace(a:bufnr, src_id, a:start_line, a:end_line)
                              else
                                call coc#api#call('buf_clear_namespace', [a:bufnr, src_id, a:start_line, a:end_line])
  158              0.000091   endif

FUNCTION  airline#util#getbufvar()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:71
Called 939 times
Total time:   0.004292
 Self time:   0.004292

count  total (s)   self (s)
  939              0.003811     return getbufvar(a:bufnr, a:key, a:def)

FUNCTION  <SNR>91_search_term()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/searchcount.vim:20
Called 55 times
Total time:   0.005673
 Self time:   0.001501

count  total (s)   self (s)
                              " shorten for all width smaller than 300 (this is just a guess)
                              " this uses a non-breaking space, because it looks like
                              " a leading space is stripped :/
   55   0.005483   0.001311   return "\ua0" .  '/' . airline#util#shorten(getreg('/'), 300, 8)

FUNCTION  267()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:22
Called 19 times
Total time:   0.000385
 Self time:   0.000385

count  total (s)   self (s)
                              " At this point this nvim instance might already have launched
                              " a new provider instance. Don't drop ownership in this case.
   19              0.000086   if self.owner == a:jobid
   19              0.000054     let self.owner = 0
   19              0.000013   endif
   19              0.000025   if a:data != 0
                                echohl WarningMsg
                                echomsg 'clipboard: error invoking '.get(self.argv, 0, '?').': '.join(self.stderr)
                                echohl None
   19              0.000011   endif

FUNCTION  268()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:153
Called 5 times
Total time:   0.020509
 Self time:   0.000559

count  total (s)   self (s)
    5              0.000059   if type(s:paste[a:reg]) == v:t_func
                                return s:paste[a:reg]()
    5              0.000020   elseif s:selections[a:reg].owner > 0
                                return s:selections[a:reg].data
    5              0.000004   end
                            
    5   0.020102   0.000152   let clipboard_data = s:try_cmd(s:paste[a:reg])
    5              0.000246   if match(&clipboard, '\v(unnamed|unnamedplus)') >= 0 && type(clipboard_data) == v:t_list && get(s:selections[a:reg].data, 0, []) ==# clipboard_data
                                " When system clipboard return is same as our cache return the cache
                                " as it contains regtype information
    5              0.000022     return s:selections[a:reg].data
                              end
                              return clipboard_data

FUNCTION  269()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:171
Called 19 times
Total time:   0.054313
 Self time:   0.054313

count  total (s)   self (s)
   19              0.000088   if a:reg == '"'
                                call s:clipboard.set(a:lines,a:regtype,'+')
                                if s:copy['*'] != s:copy['+']
                                  call s:clipboard.set(a:lines,a:regtype,'*')
                                end
                                return 0
   19              0.000015   end
                            
   19              0.000159   if type(s:copy[a:reg]) == v:t_func
                                call s:copy[a:reg](a:lines, a:regtype)
                                return 0
   19              0.000013   end
                            
   19              0.000041   if s:cache_enabled == 0
                                call s:try_cmd(s:copy[a:reg], a:lines)
                                "Cache it anyway we can compare it later to get regtype of the yank
                                let s:selections[a:reg] = copy(s:selection)
                                let s:selections[a:reg].data = [a:lines, a:regtype]
                                return 0
   19              0.000013   end
                            
   19              0.000073   if s:selections[a:reg].owner > 0
                                let prev_job = s:selections[a:reg].owner
   19              0.000013   end
   19              0.000158   let s:selections[a:reg] = copy(s:selection)
   19              0.000087   let selection = s:selections[a:reg]
   19              0.000120   let selection.data = [a:lines, a:regtype]
   19              0.000068   let selection.argv = s:copy[a:reg]
   19              0.000054   let selection.detach = s:cache_enabled
   19              0.000071   let selection.cwd = "/"
   19              0.050537   let jobid = jobstart(selection.argv, selection)
   19              0.000180   if jobid > 0
   19              0.000347     call jobsend(jobid, a:lines)
   19              0.000447     call jobclose(jobid, 'stdin')
                                " xclip does not close stdout when receiving input via stdin
   19              0.000130     if selection.argv[0] ==# 'xclip'
                                  call jobclose(jobid, 'stdout')
   19              0.000028     endif
   19              0.000085     let selection.owner = jobid
   19              0.000055     let ret = 1
                              else
                                echohl WarningMsg
                                echomsg 'clipboard: failed to execute: '.(s:copy[a:reg])
                                echohl None
                                let ret = 1
   19              0.000018   endif
                            
                              " The previous provider instance should exit when the new one takes
                              " ownership, but kill it to be sure we don't fill up the job table.
   19              0.000072   if exists('prev_job')
                                call timer_start(1000, {... -> jobwait([prev_job], 0)[0] == -1 && jobstop(prev_job)})
   19              0.000015   endif
                            
   19              0.000078   return ret

FUNCTION  <SNR>76_HighlightStringSpellcheck()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:75
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000004   return get(g:, 'go_highlight_string_spellcheck', 1)

FUNCTION  coc#highlight#match_ranges()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:370
Called 33 times
Total time:   0.023332
 Self time:   0.023332

count  total (s)   self (s)
   33              0.000396   let winid = a:winid == 0 ? win_getid() : a:winid
   33              0.000261   let bufnr = a:bufnr == 0 ? winbufnr(winid) : a:bufnr
   33              0.000795   if empty(getwininfo(winid)) || (a:bufnr != 0 && winbufnr(a:winid) != a:bufnr)
                                " not valid
                                return []
   33              0.000056   endif
   33              0.000108   if !s:clear_match_by_window
                                let curr = win_getid()
                                if has('nvim')
                                  noa call nvim_set_current_win(winid)
                                else
                                  noa call win_gotoid(winid)
                                endif
   33              0.000035   endif
   33              0.000113   let ids = []
  106              0.000267   for range in a:ranges
   73              0.000248     let pos = []
   73              0.000304     let start = range['start']
   73              0.000213     let end = range['end']
  146              0.000729     for lnum in range(start['line'] + 1, end['line'] + 1)
   73              0.000521       let arr = getbufline(bufnr, lnum)
   73              0.000459       let line = empty(arr) ? '' : arr[0]
   73              0.000224       if empty(line)
                                    continue
   73              0.000068       endif
   73              0.001051       let colStart = lnum == start['line'] + 1 ? strlen(strcharpart(line, 0, start['character'])) + 1 : 1
   73              0.001121       let colEnd = lnum == end['line'] + 1 ? strlen(strcharpart(line, 0, end['character'])) + 1 : strlen(line) + 1
   73              0.000218       if colStart == colEnd
                                    continue
   73              0.000053       endif
   73              0.000598       call add(pos, [lnum, colStart, colEnd - colStart])
  146              0.000158     endfor
   73              0.000226     if !empty(pos)
   73              0.000633       let opts = s:clear_match_by_window ? {'window': a:winid} : {}
   73              0.000151       let i = 1
   73              0.000264       let l = []
  146              0.000294       for p in pos
   73              0.000313         call add(l, p)
   73              0.000185         if i % 8 == 0
                                      let id = matchaddpos(a:hlGroup, l, a:priority, -1, opts)
                                      call add(ids, id)
                                      let l = []
   73              0.000076         endif
   73              0.000184         let i += 1
  146              0.000197       endfor
   73              0.000243       if !empty(l)
   73              0.000749         let id = matchaddpos(a:hlGroup, l, a:priority, -1, opts)
   73              0.000282         call add(ids, id)
   73              0.000064       endif
   73              0.000054     endif
  106              0.000229   endfor
   33              0.000119   if !s:clear_match_by_window
                                if has('nvim')
                                  noa call nvim_set_current_win(curr)
                                else
                                  noa call win_gotoid(curr)
                                endif
   33              0.000036   endif
   33              0.000087   return ids

FUNCTION  <SNR>25_AsyncRequest()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:112
Called 139 times
Total time:   0.056361
 Self time:   0.010796

count  total (s)   self (s)
  139              0.003080   let Cb = empty(a:args)? v:null : a:args[len(a:args) - 1]
  139              0.000995   if type(Cb) == 2
                                if !coc#rpc#ready()
                                  call Cb('service not started', v:null)
                                else
                                  call coc#rpc#request_async(a:name, a:args[0:-2], Cb)
                                endif
                                return ''
  139              0.000167   endif
  139   0.048401   0.002836   call coc#rpc#notify(a:name, a:args)
  139              0.000246   return ''

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:68
Called 145854 times
Total time:  24.346500
 Self time:  10.982486

count  total (s)   self (s)
                                " only check for the cterm reverse attribute
                                " TODO: do we need to check all modes (gui, term, as well)?
145854              0.812558     let reverse = synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')
145854              0.646449     if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                  let res = s:hl_groups[a:group]
                                  return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
145854              0.096376     else
145854   4.398537   1.125968       let ctermfg = s:get_syn(a:group, 'fg', 'cterm')
145854   4.208271   1.076052       let ctermbg = s:get_syn(a:group, 'bg', 'cterm')
145854   4.020556   1.013907       let guifg = s:get_syn(a:group, 'fg', 'gui')
145854   3.960052   1.012310       let guibg = s:get_syn(a:group, 'bg', 'gui')
145854              0.583678       let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
145854              0.171539       if reverse
                                    let res = s:get_array(guibg, guifg, ctermbg, ctermfg, bold ? ['bold'] : a:000)
145854              0.090656       else
145854   2.486807   1.481972         let res = s:get_array(guifg, guibg, ctermfg, ctermbg, bold ? ['bold'] : a:000)
145854              0.092477       endif
145854              0.087827     endif
145854              0.666500     let s:hl_groups[a:group] = res
145854              0.157647     return res

FUNCTION  provider#clipboard#Call()
    Defined: /usr/local/share/nvim/runtime/autoload/provider/clipboard.vim:230
Called 24 times
Total time:   0.077789
 Self time:   0.002967

count  total (s)   self (s)
   24              0.000561   if get(s:, 'here', v:false)  " Clipboard provider must not recurse. #7184
                                return 0
   24              0.000033   endif
   24              0.000127   let s:here = v:true
   24              0.000029   try
   24   0.076587   0.001766     return call(s:clipboard[a:method],a:args,s:clipboard)
   24              0.000039   finally
   24              0.000109     let s:here = v:false
   24              0.000036   endtry

FUNCTION  airline#util#shorten()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:28
Called 13469 times
Total time:   0.718737
 Self time:   0.475927

count  total (s)   self (s)
13469   0.462021   0.219211   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
13469              0.010833   else
13469              0.026076     return a:text
                              endif

FUNCTION  airline#extensions#coc#get_current_function()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:43
Called 4962 times
Total time:   0.032946
 Self time:   0.032946

count  total (s)   self (s)
 4962              0.029313   return get(b:, 'coc_current_function', '')

FUNCTION  275()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:12
Called 189 times
Total time:   0.003065
 Self time:   0.002200

count  total (s)   self (s)
  189              0.000767   let spc = empty(a:contents) ? '' : g:airline_symbols.space
  189   0.002191   0.001326   call self.add_section(a:group, spc.a:contents.spc)

FUNCTION  276()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:17
Called 3807 times
Total time:   0.019393
 Self time:   0.019393

count  total (s)   self (s)
 3807              0.017763   call add(self._sections, [a:group, a:contents])

FUNCTION  coc#float#nvim_refresh_scrollbar()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:832
Called 400 times
Total time:   0.031269
 Self time:   0.017189

count  total (s)   self (s)
  400   0.025310   0.011230   let id = coc#float#get_related(a:winid, 'scrollbar')
  400              0.002002   if id && nvim_win_is_valid(id)
                                call coc#float#nvim_scrollbar(a:winid)
  400              0.000489   endif

FUNCTION  <SNR>81_neoterm_id()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/term.vim:69
Called 63 times
Total time:   0.000578
 Self time:   0.000578

count  total (s)   self (s)
   63              0.000228   let id = getbufvar(a:bufnr, 'neoterm_id')
   63              0.000090   if id !=? ''
                                let id = 'neoterm-'.id
   63              0.000037   endif
   63              0.000069   return id

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:205
Called 147 times
Total time:   0.110823
 Self time:   0.010651

count  total (s)   self (s)
  147              0.000981     if getbufvar(a:bufnr, '&modified')
   93              0.001976       let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
   54              0.000042     else
   54              0.000803       let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
  147              0.000140     endif
                            
  147              0.000635     if !empty(colors)
  147   0.104443   0.004271       call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
  147              0.000135     endif

FUNCTION  airline#extensions#nvimlsp#get_error()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim:42
Called 4186 times
Total time:   0.218625
 Self time:   0.062049

count  total (s)   self (s)
 4186   0.215323   0.058747   return airline#extensions#nvimlsp#get('Error')

FUNCTION  airline#extensions#keymap#status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim:10
Called 4186 times
Total time:   0.294377
 Self time:   0.294377

count  total (s)   self (s)
 4186              0.042566   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
 4186              0.030763     let short_codes = get(g:, 'airline#extensions#keymap#short_codes', {})
 4186              0.035551     let label = get(g:, 'airline#extensions#keymap#label', g:airline_symbols.keymap)
 4186              0.028748     let default = get(g:, 'airline#extensions#keymap#default', '')
 4186              0.011912     if (label !=# '')
 4186              0.015684       let label .= ' '
 4186              0.004587     endif
 4186              0.012638     let keymap = &keymap
 4186              0.017539     if has_key(short_codes, keymap)
                                  let keymap = short_codes[keymap]
 4186              0.003779     endif
 4186              0.052281     return printf('%s', (!empty(keymap) && &iminsert ? (label . keymap) : (!empty(default) ? label . default : default)))
                              else
                                return ''
                              endif

FUNCTION  281()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:62
Called 795 times
Total time:   4.354677
 Self time:   0.579481

count  total (s)   self (s)
  795              0.001389   let side = 1
  795              0.001091   let line = ''
  795              0.000991   let i = 0
  795              0.002394   let length = len(self._sections)
  795              0.000989   let split = 0
  795              0.001261   let is_empty = 0
  795              0.001357   let prev_group = ''
                            
 5397              0.009393   while i < length
 4602              0.013410     let section = self._sections[i]
 4602              0.010837     let group = section[0]
 4602              0.018675     let contents = section[1]
 4602              0.007977     let pgroup = prev_group
 4602   0.118274   0.051535     let prev_group = airline#builder#get_prev_group(self._sections, i)
 4602              0.014597     if group ==# 'airline_c' && &buftype ==# 'terminal' && self._context.active
                                  let group = 'airline_term'
 4602              0.019543     elseif group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let group = 'airline_c'. self._context.bufnr
 4602              0.019722     elseif prev_group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let prev_group = 'airline_c'. self._context.bufnr
 4602              0.002575     endif
 4602              0.004927     if is_empty
                                  let prev_group = pgroup
 4602              0.002059     endif
 4602   0.086967   0.045157     let is_empty = s:section_is_empty(self, contents)
                            
 4602              0.004585     if is_empty
                                  " need to fix highlighting groups, since we
                                  " have skipped a section, we actually need
                                  " the previous previous group and so the
                                  " seperator goes from the previous previous group
                                  " to the current group
                                  let pgroup = group
 4602              0.002232     endif
                            
 4602              0.006385     if group == ''
                                  let line .= contents
 4602              0.006233     elseif group == '|'
  795              0.000890       let side = 0
  795              0.002114       let line .= contents
  795              0.000889       let split = 1
 3807              0.002044     else
 3807              0.005375       if prev_group == ''
  795              0.002555         let line .= '%#'.group.'#'
 3012              0.003123       elseif split
  795              0.000917         if !is_empty
  795   0.723937   0.009952           let line .= s:get_transitioned_seperator(self, prev_group, group, side)
  795              0.000743         endif
  795              0.001120         let split = 0
 2217              0.001256       else
 2217              0.002527         if !is_empty
 2217   2.770693   0.025470           let line .= s:get_seperator(self, prev_group, group, side)
 2217              0.001512         endif
 3807              0.002361       endif
 3807   0.266297   0.058860       let line .= is_empty ? '' : s:get_accented_line(self, group, contents)
 4602              0.002737     endif
                            
 4602              0.008364     let i = i + 1
 5397              0.006069   endwhile
                            
  795              0.001436   if !self._context.active
                                "let line = substitute(line, '%#airline_c#', '%#airline_c'.self._context.bufnr.'#', '')
  651              0.026654     let line = substitute(line, '%#.\{-}\ze#', '\0_inactive', 'g')
  795              0.000676   endif
  795              0.001467   return line

FUNCTION  <SNR>77_check_defined_section()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:47
Called 141 times
Total time:   0.002151
 Self time:   0.002151

count  total (s)   self (s)
  141              0.000828   if !exists('w:airline_section_{a:name}')
  141              0.001109     let w:airline_section_{a:name} = g:airline_section_{a:name}
  141              0.000092   endif

FUNCTION  <SNR>76_HighlightChanWhitespaceError()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:31
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_chan_whitespace_error', 0)

FUNCTION  coc#rpc#notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:96
Called 4098 times
Total time:   1.071004
 Self time:   0.145122

count  total (s)   self (s)
 4098   0.109663   0.047149   if !coc#rpc#ready()
                                return ''
 4098              0.004037   endif
 4098   0.936032   0.072664   call s:client['notify'](a:method, a:args)
 4098              0.007527   return ''

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:95
Called 4186 times
Total time:   1.310675
 Self time:   0.720589

count  total (s)   self (s)
 4186              0.032277   if !get(w:, 'airline_active', 0)
                                return ''
 4186              0.003653   endif
                              " Cache values, so that it isn't called too often
 4186   0.236934   0.172467   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
 4186              0.004112   endif
 4186   0.481102   0.073883   let hunks = airline#extensions#hunks#get_raw_hunks()
 4186              0.011007   let string = ''
 4186   0.093510   0.060194   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
 4186              0.013425   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
                                for i in [0, 1, 2]
                                  if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
                                    let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
                                  endif
                                endfor
 4186              0.003958   endif
 4186   0.118635   0.101675   if index(airline#extensions#get_loaded_extensions(), 'branch') == -1 && string[-1:] == ' '
                                " branch extension not loaded, skip trailing whitespace
                                let string = string[0:-2]
 4186              0.004636   endif
                            
 4186              0.018232   let b:airline_hunks = string
 4186              0.015626   let b:airline_changenr = b:changedtick
 4186   0.117700   0.049578   let s:airline_winwidth = airline#util#winwidth()
 4186              0.007805   return string

FUNCTION  <SNR>54_on_cursor_moved()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:83
Called 400 times
Total time:   0.019978
 Self time:   0.014457

count  total (s)   self (s)
  400              0.004865   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
  400              0.000469   endif
  400   0.011470   0.005949   call airline#update_tabline()

FUNCTION  <SNR>28_request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:156
Called 176 times
Total time:   1.342706
 Self time:   1.308927

count  total (s)   self (s)
  176   0.005703   0.003451   let channel = coc#client#get_channel(self)
  176              0.001207   if empty(channel) | return '' | endif
  176              0.000305   try
  176              0.000354     if s:is_vim
                                  let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 60 * 1000})
                                  if type(res) == 1 && res ==# ''
                                    throw 'request '.a:method. ' '.string(a:args).' timeout after 60s'
                                  endif
                                  let [l:errmsg, res] =  res
                                  if !empty(l:errmsg)
                                    throw l:errmsg
                                  else
                                    return res
                                  endif
  176              0.000210     else
  176   1.317387   1.285859       return call('rpcrequest', [channel, a:method] + a:args)
                                endif
    5              0.000116   catch /.*/
    5              0.000048     if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0) | return | endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
    5              0.000031     elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
    5              0.000003     else
    5              0.000062       echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
    5              0.000003     endif
  176              0.000385   endtry

FUNCTION  coc#float#valid()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:189
Called 20 times
Total time:   0.000509
 Self time:   0.000509

count  total (s)   self (s)
   20              0.000039   if a:winid <= 0
                                return 0
   20              0.000012   endif
   20              0.000056   if has('nvim')
   20              0.000333     return nvim_win_is_valid(a:winid) ? 1 : 0
                              endif
                              return s:popup_visible(a:winid)

FUNCTION  coc#highlight#highlight_lines()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:293
Called 138 times
Total time:   0.190107
 Self time:   0.019457

count  total (s)   self (s)
  138              0.000349   let region_id = 1
  138              0.000233   let defined = []
  138              0.000221   let cmds = []
  292              0.000565   for config in a:blocks
  154              0.000519     let start = config['startLine'] + 1
  154              0.001259     let end = config['endLine'] == -1 ? len(getbufline(winbufnr(a:winid), 1, '$')) + 1 : config['endLine'] + 1
  154              0.000518     let filetype = get(config, 'filetype', '')
  154              0.000436     let hlGroup = get(config, 'hlGroup', '')
  154              0.000335     if !empty(hlGroup)
   31              0.000247       call add(cmds, 'syntax region '.hlGroup.' start=/\%'.start.'l/ end=/\%'.end.'l/')
  123              0.000077     else
  123              0.001231       let filetype = matchstr(filetype, '\v^\w+')
  123              0.000920       if empty(filetype) || filetype == 'txt' || index(get(g:, 'coc_markdown_disabled_languages', []), filetype) != -1
   27              0.000035         continue
   96              0.000051       endif
   96              0.000261       if index(defined, filetype) == -1
   95              0.000685         call add(cmds, 'syntax include @'.toupper(filetype).' syntax/'.filetype.'.vim')
   95              0.000218         call add(cmds, 'unlet! b:current_syntax')
   95              0.000228         call add(defined, filetype)
   96              0.000051       endif
   96              0.000841       call add(cmds, 'syntax region CodeBlock'.region_id.' start=/\%'.start.'l/ end=/\%'.end.'l/ contains=@'.toupper(filetype).' keepend')
   96              0.000209       let region_id = region_id + 1
  127              0.000066     endif
  265              0.000368   endfor
  138              0.000296   if !empty(cmds)
  126   0.172012   0.001362     call coc#compat#execute(a:winid, cmds, 'silent!')
  138              0.000100   endif

FUNCTION  <SNR>27_variables()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:245
Called 8 times
Total time:   0.000569
 Self time:   0.000569

count  total (s)   self (s)
    8              0.000117   let info = getbufinfo(a:bufnr)
    8              0.000083   let variables = empty(info) ? {} : copy(info[0]['variables'])
   42              0.000066   for key in keys(variables)
   34              0.000136     if key !~# '\v^coc'
   34              0.000075       unlet variables[key]
   34              0.000015     endif
   42              0.000023   endfor
    8              0.000011   return variables

FUNCTION  <SNR>20_LoadFTPlugin()
    Defined: /usr/local/share/nvim/runtime/ftplugin.vim:14
Called 10 times
Total time:   0.019449
 Self time:   0.016782

count  total (s)   self (s)
   10              0.000068     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
   10              0.000007     endif
                            
   10              0.000045     let s = expand("<amatch>")
   10              0.000017     if s != ""
   10              0.000102       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
   10              0.000006       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
   20              0.000114       for name in split(s, '\.')
   10   0.009833   0.009480         exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
                                    " Load lua ftplugins
   10   0.008972   0.006658         exe printf('runtime! ftplugin/%s.lua ftplugin/%s_*.lua ftplugin/%s/*.lua', name, name, name)
   20              0.000087       endfor
   10              0.000009     endif

FUNCTION  coc#util#diagnostic_info()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:80
Called 239 times
Total time:   0.034956
 Self time:   0.029057

count  total (s)   self (s)
  239   0.010214   0.004314   let checked = coc#util#check_refresh(a:bufnr)
  239              0.000481   if !checked
                                return v:null
  239              0.000128   endif
  239              0.002464   if a:checkInsert && mode() =~# '^i'
   17              0.000020     return v:null
  222              0.000180   endif
  222              0.000561   let locationlist = ''
  222              0.000432   let winid = -1
  650              0.005473   for info in getwininfo()
  541              0.001423     if info['bufnr'] == a:bufnr
  113              0.000364       let winid = info['winid']
  113              0.002676       let locationlist = get(getloclist(winid, {'title': 1}), 'title', '')
  113              0.000115       break
  428              0.000196     endif
  650              0.001162   endfor
  222              0.003508   return { 'bufnr': bufnr('%'), 'winid': winid, 'lnum': line('.'), 'locationlist': locationlist }

FUNCTION  airline#util#prepend()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:63
Called 29772 times
Total time:   0.371049
 Self time:   0.371049

count  total (s)   self (s)
29772              0.143562   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
29772              0.023331   endif
29772              0.137431   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  <SNR>76_HighlightVariableDeclarations()
    Defined: /usr/local/share/nvim/runtime/syntax/go.vim:91
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return get(g:, 'go_highlight_variable_declarations', 0)

FUNCTION  coc#highlight#update_highlights()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/highlight.vim:76
Called 37 times
Total time:   0.025853
 Self time:   0.014288

count  total (s)   self (s)
   37              0.000236   let bufnr = a:bufnr
   37              0.000091   if a:bufnr == 0
                                let bufnr = bufnr('%')
   37              0.000032   endif
   37              0.000132   if !bufloaded(bufnr)
                                return
   37              0.000034   endif
   37              0.000223   let start = get(a:, 1, 0)
   37              0.000189   let end = get(a:, 2, -1)
   37              0.000127   if empty(a:highlights)
   14   0.001607   0.000252     call coc#highlight#clear_highlight(bufnr, a:key, start, end)
   14              0.000012     return
   23              0.000013   endif
   23              0.000066   let total = len(a:highlights)
                              " index list that exists with current highlights
   23              0.000066   let exists = []
   23   0.000637   0.000317   let ns = coc#highlight#create_namespace(a:key)
   23              0.000040   let currIndex = 0
   23              0.000170   if has('nvim-0.5.0') || exists('*prop_list')
   23   0.006854   0.000408     let current = coc#highlight#get(bufnr, a:key, start, end)
   60   0.001191   0.001151     for lnum in sort(map(keys(current), 'str2nr(v:val)'), {a, b -> a - b})
   37              0.000202       let items = current[lnum]
   37              0.000091       let indexes = []
   37              0.000085       let nextIndex = currIndex
   37              0.000079       if currIndex != total
   64              0.000091         for item in items
   82              0.000228           for i in range(currIndex, total - 1)
   68              0.000204             let hi = a:highlights[i]
   68              0.000276             if hi['lnum'] > item['lnum']
   21              0.000044               let nextIndex = i
   21              0.000022               break
   47              0.000027             endif
   47   0.002715   0.000766             if coc#helper#obj_equal(item, hi)
   25              0.000107               call add(indexes, i)
   25              0.000134               let nextIndex = max([nextIndex, i + 1])
   47              0.000031             endif
   82              0.000063           endfor
   64              0.000044         endfor
   37              0.000026       endif
   37              0.000090       let currIndex = nextIndex
                                  " all highlights of current line exists, not clear.
   37              0.000162       if len(indexes) == len(items)
   22              0.000091         let exists = exists + indexes
   15              0.000013       else
   15              0.000064         if has('nvim')
   15              0.000636           call nvim_buf_clear_namespace(bufnr, ns, lnum, lnum + 1)
                                    else
                                      call coc#api#call('buf_clear_namespace', [bufnr, ns, lnum, lnum + 1])
   15              0.000016         endif
   37              0.000025       endif
   60              0.000083     endfor
   23              0.000108     if has('nvim') && end == -1
   23              0.000697       let count = nvim_buf_line_count(bufnr)
                                  " remove highlights exceed last line.
   23              0.000441       call nvim_buf_clear_namespace(bufnr, ns, count, -1)
   23              0.000042     endif
                              else
                                call coc#highlight#clear_highlight(bufnr, a:key, start, end)
   23              0.000017   endif
   23              0.000112   let indexes = range(0, total - 1)
   23              0.000056   if !empty(exists)
   15              0.000162     let indexes = filter(indexes, 'index(exists, v:val) == -1')
   23              0.000015   endif
   62              0.000100   for i in indexes
   39              0.000119     let hi = a:highlights[i]
   39   0.002182   0.000727     call coc#highlight#add_highlight(bufnr, ns, hi['hlGroup'], hi['lnum'], hi['colStart'], hi['colEnd'])
   62              0.000052   endfor

FUNCTION  coc#float#nvim_scrollbar()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:402
Called 138 times
Total time:   0.050915
 Self time:   0.032690

count  total (s)   self (s)
  138              0.001163   if !has('nvim-0.4.0') || getwinvar(a:winid, 'target_winid', 0)
                                return
  138              0.000077   endif
  138              0.007460   let winids = nvim_tabpage_list_wins(nvim_get_current_tabpage())
  138              0.000637   if index(winids, a:winid) == -1
                                return
  138              0.000090   endif
  138              0.002821   let config = nvim_win_get_config(a:winid)
  138              0.002602   let [row, column] = nvim_win_get_position(a:winid)
  138              0.000321   let relative = 'editor'
  138              0.000338   if row == 0 && column == 0
                                " fix bad value when ext_multigrid is enabled. https://github.com/neovim/neovim/issues/11935
                                let [row, column] = [config.row, config.col]
                                let relative = config.relative
  138              0.000096   endif
  138              0.002104   let width = nvim_win_get_width(a:winid)
  138              0.002224   let height = nvim_win_get_height(a:winid)
  138              0.000534   let bufnr = winbufnr(a:winid)
  138              0.001102   let cw = getwinvar(a:winid, '&foldcolumn', 0) ? width - 1 : width
  138   0.016416   0.003589   let ch = coc#float#content_height(bufnr, cw, getwinvar(a:winid, '&wrap'))
  138   0.004405   0.001564   let closewin = coc#float#get_related(a:winid, 'close')
  138              0.000646   let border = getwinvar(a:winid, 'border', [])
  138              0.000574   let winblend = getwinvar(a:winid, '&winblend', 0)
  138              0.000488   let move_down = closewin && !get(border, 0, 0)
  138   0.003988   0.001430   let id = coc#float#get_related(a:winid, 'scrollbar')
  138              0.000330   if ch <= height || height <= 1
                                " no scrollbar, remove exists
  138              0.000147     if id
                                  call s:close_win(id)
  138              0.000082     endif
  138              0.000118     return
                              endif
                              if move_down
                                let height = height - 1
                              endif
                              call coc#float#close_related(a:winid, 'pad')
                              let sbuf = id ? winbufnr(id) : 0
                              let sbuf = coc#float#create_buf(sbuf, repeat([' '], height))
                              let opts = { 'row': move_down ? row + 1 : row, 'col': column + width, 'relative': relative, 'width': 1, 'height': height, 'focusable': v:false, 'style': 'minimal', }
                              if has('nvim-0.5.0')
                                let opts['zindex'] = 300
                              endif
                              if id
                                call nvim_win_set_config(id, opts)
                              else
                                noa let id = nvim_open_win(sbuf, 0 , opts)
                                if id == 0
                                  return
                                endif
                                if winblend
                                  call setwinvar(id, '&winblend', winblend)
                                endif
                                call setwinvar(id, 'kind', 'scrollbar')
                                call setwinvar(id, 'target_winid', a:winid)
                                call s:add_related(id, a:winid)
                              endif
                              call coc#float#nvim_scroll_adjust(a:winid)
                              let thumb_height = max([1, float2nr(floor(height * (height + 0.0)/ch))])
                              let wininfo = getwininfo(a:winid)[0]
                              let start = 0
                              if wininfo['topline'] != 1
                                " needed for correct getwininfo
                                let firstline = wininfo['topline']
                                let lastline = s:nvim_get_botline(firstline, height, cw, bufnr)
                                let linecount = nvim_buf_line_count(winbufnr(a:winid))
                                if lastline >= linecount
                                  let start = height - thumb_height
                                else
                                  let start = max([1, float2nr(round((height - thumb_height + 0.0)*(firstline - 1.0)/(ch - height)))])
                                endif
                              endif
                              " add highlights
                              call nvim_buf_clear_namespace(sbuf, -1, 0, -1)
                              for idx in range(0, height - 1)
                                if idx >= start && idx < start + thumb_height
                                  call nvim_buf_add_highlight(sbuf, -1, 'PmenuThumb', idx, 0, 1)
                                else
                                  call nvim_buf_add_highlight(sbuf, -1, 'PmenuSbar', idx, 0, 1)
                                endif
                              endfor

FUNCTION  coc#float#nvim_right_pad()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:309
Called 138 times
Total time:   0.073047
 Self time:   0.035025

count  total (s)   self (s)
  138   0.003347   0.001381   let winid = coc#float#get_related(a:winid, 'pad')
  138              0.000192   let bufnr = 0
  138              0.001929   let config = { 'relative': a:config['relative'], 'width': 1, 'height': a:config['height'], 'row': a:config['row'], 'col': a:config['col'] + a:config['width'], 'focusable': v:false, 'style': 'minimal', }
  138              0.000593   if has('nvim-0.5.0')
  138              0.000418     let config['zindex'] = 300
  138              0.000193   endif
  138              0.001059   if winid && nvim_win_is_valid(winid)
   20              0.000455     let bufnr = nvim_win_get_buf(winid)
   20              0.010017     noa call nvim_win_close(winid, 1)
  138              0.000128   endif
  138   0.038630   0.002574   let bufnr = coc#float#create_buf(bufnr, repeat([''], a:config['height']))
  138              0.008186   noa let winid = nvim_open_win(bufnr, 0, config)
  138              0.000198   if winid
                                " minimal not work
  138              0.000584     if !has('nvim-0.4.3')
                                  call setwinvar(winid, '&colorcolumn', 0)
                                  call setwinvar(winid, '&number', 0)
                                  call setwinvar(winid, '&relativenumber', 0)
                                  call setwinvar(winid, '&foldcolumn', 0)
                                  call setwinvar(winid, '&signcolumn', 0)
  138              0.000137     endif
  138              0.000168     if a:winblend
                                  call setwinvar(winid, '&winblend', a:winblend)
  138              0.000085     endif
  138              0.001472     call setwinvar(winid, '&winhl', 'Normal:'.a:hlgroup.',NormalNC:'.a:hlgroup)
  138              0.000710     call setwinvar(winid, 'target_winid', a:winid)
  138              0.000404     call setwinvar(winid, 'kind', 'pad')
  138              0.000447     call add(a:related, winid)
  138              0.000088   endif

FUNCTION  <SNR>54_init()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:15
Called 144 times
Total time:   0.000701
 Self time:   0.000701

count  total (s)   self (s)
  144              0.000281   if s:airline_initialized
  144              0.000149     return
                              endif
                              let s:airline_initialized = 1
                            
                              call airline#extensions#load()
                              call airline#init#sections()
                            
                              let s:theme_in_vimrc = exists('g:airline_theme')
                              if s:theme_in_vimrc
                                try
                                  if g:airline_theme is# 'random'
                                    let g:airline_theme=s:random_theme()
                                  endif
                                  let palette = g:airline#themes#{g:airline_theme}#palette
                                catch
                                  call airline#util#warning(printf('Could not resolve airline theme "%s". Themes have been migrated to github.com/vim-airline/vim-airline-themes.', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                endtry
                                try
                                  silent call airline#switch_theme(g:airline_theme)
                                catch
                                  call airline#util#warning(printf('Could not find airline theme "%s".', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                  silent call airline#switch_theme(g:airline_theme)
                                endtry
                              else
                                let g:airline_theme = 'dark'
                                silent call s:on_colorscheme_changed()
                              endif
                            
                              call airline#util#doautocmd('AirlineAfterInit')

FUNCTION  airline#extensions#get_loaded_extensions()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:505
Called 4186 times
Total time:   0.016960
 Self time:   0.016960

count  total (s)   self (s)
 4186              0.013003   return s:loaded_ext

FUNCTION  airline#builder#new()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:229
Called 795 times
Total time:   0.027285
 Self time:   0.027285

count  total (s)   self (s)
  795              0.006499   let builder = copy(s:prototype)
  795              0.002236   let builder._context = a:context
  795              0.001855   let builder._sections = []
                            
  795              0.013899   call extend(builder._context, { 'left_sep': g:airline_left_sep, 'left_alt_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_sep, 'right_alt_sep': g:airline_right_alt_sep, }, 'keep')
  795              0.001272   return builder

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
 5053  35.473424   1.001190  airline#check_mode()
  147  34.348137   2.546105  airline#highlighter#highlight()
45630  32.381899   2.501325  <SNR>83_exec_separator()
145854  24.346500  10.982486  airline#highlighter#get_highlight()
91260  15.943115   1.110202  airline#themes#get_highlight()
50160  15.722689   5.386090  airline#highlighter#exec()
583416  12.359179             <SNR>83_get_syn()
  378   5.355377   0.028008  <SNR>54_on_window_changed()
  144   5.326668   0.014924  airline#update_statusline()
  795   5.217259   0.054909  <SNR>79_invoke_funcrefs()
  795   4.354677   0.579481  281()
  144   3.630363   0.049928  airline#update_statusline_inactive()
 2217   2.745223   0.054544  <SNR>94_get_seperator()
 3012   2.541052   0.142335  <SNR>94_get_transitioned_seperator()
 3012   2.398717   0.064680  airline#highlighter#add_separator()
 4186   1.505745   1.030156  airline#extensions#whitespace#check()
  176   1.356113   0.009444  coc#rpc#request()
  176   1.342706   1.308927  <SNR>28_request()
  271   1.326352   0.317559  coc#_complete()
 4186   1.310675   0.720589  airline#extensions#hunks#get_hunks()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
583416             12.359179  <SNR>83_get_syn()
145854  24.346500  10.982486  airline#highlighter#get_highlight()
50160  15.722689   5.386090  airline#highlighter#exec()
  147  34.348137   2.546105  airline#highlighter#highlight()
45630  32.381899   2.501325  <SNR>83_exec_separator()
  176   1.342706   1.308927  <SNR>28_request()
91260  15.943115   1.110202  airline#themes#get_highlight()
 4186   1.505745   1.030156  airline#extensions#whitespace#check()
145854              1.004835  <SNR>83_get_array()
 5053  35.473424   1.001190  airline#check_mode()
50160              0.865723  <SNR>83_CheckDefined()
 4098   0.863368   0.819406  <SNR>28_notify()
 4186   1.310675   0.720589  airline#extensions#hunks#get_hunks()
  795   4.354677   0.579481  281()
48824              0.564890  <SNR>83_hl_group_exists()
29393              0.563052  airline#util#append()
33180              0.543470  airline#util#winwidth()
49241   0.596160   0.534572  airline#util#wrap()
   40   0.661194   0.480526  coc#float#create_cursor_float()
13469   0.718737   0.475927  airline#util#shorten()

